% ESRF Data
%% NOte that the orientatins are rotated to make sense! -18 about y and 5 about x
% this is to generate grain neigbours
% This program calls a fortran file to generate grain euler angles as well
% as required files for creating input file to ABAQUS FE slover.


%first of all I need to make sure that the volumes are geberared properly
%as the stress differences are significantly effected by the volume
%% from the output file

%%**** 1: #  grainno; 2: mean_IA; 3: grainvolume;
%%**** 4:x;5: y; 6: z; 7:rodx; 8: rody; 9:rodz; 10: U11; 11:U12; 12: U13;
%%**** 13:U21; 14: U22; 15: U23; 16: U31; 17: U32; 18: U33; 19: eps11;
%%**** 20: eps22;  21: eps33; 22: ;eps23; 23: eps13; 24: eps12; 25: eps11_s;26: eps22_s
%%**** 27:eps33_s; 28: eps23_s ; 29:  eps13_s; 30: eps12_s; 
%%**** 31: sig11; 32: sig22; 33: sig33; 34: sig23; 35: sig13; 36: sig12; 37:sig11_s;
%%**** 38: sig22_s; 39: sig33_s; 40: sig23_s; 41:sig13_s; 42: sig12_s; 43: parent
  


%%%% 1: #grainno;  2:mean_IA;  3:grainvolume
%%%% 4:6 x y z;  7:9: rodx rody rodz; 
%%%% 10U11 11U12 12U13 13U21 14U22 15U23 16U31 17U32 18U33
%%%% 19eps11 20eps22 21eps33 22eps23 23eps13 24eps12  
%%%% 25eps11_s  26eps22_s  27eps33_s  28eps23_s  29eps13_s  30eps12_s  
%%%% 31 sig11;  32sig22;  33sig33; 34 sig23;  35 sig13;  36 sig12;
%%%% 37 sig11_s;
%%%% 38 sig22_s;  39 sig33_s;  40 sig23_s;  41 sig13_s;  42 sig12_s; 
%%%% 43: parent;



%%%%%  -0.361<x<0.4144;
%%%%%  -0.4062<y<0.369;
%%%%%  -0.451<z<0.4702



%%% 


%% Program parametes
clear;
nstpsz=4; % mesh size resolution: higher value results in better rersolution but slower run.
% note that the difference between two upper baound and lower bound should
% be a natural multiple of nstpsz or:: mod (xfin-x0,nstpsz)=0 same for y
% and z
x0=-300 %-120;   % smallest value in the x-direction (it can be used to cut grains at the edges)
y0=-300 %-200;   % smallest value in the y-direction (it can be used to cut grains at the edges)
z0=-300% -150;     % smallest value in the z-direction (it can be used to cut grains at the edges)
xfin=300% 120;  % biggest value in the x-direction (it can be used to cut grains at the edges)
yfin=300% 202;  % biggest value in the y-direction (it can be used to cut grains at the edges)
zfin=300% 150;  % biggest value in the z-direction (it can be used to cut grains at the edges)
ngus=10000; %estimated number of grains
%%

%%
input_mat=[nstpsz;x0; y0;z0;xfin;yfin;zfin ];
save ('f_input.dat','input_mat', '-ascii');
fname='f_input.dat';
% system(['RevisedVoronoi.exe < ' fname]); %run executable with c
% this is to plot the grain map generated by the fortran file:
graineuler=importdata ('grain_euler.dat');
createdmesh=importdata('GRAI001.dat');
%% This is to plot the 3D map of the grains; This section uses lots if
%% memory from graphic card. it migh be better to deactive this part of the
%% code if grain map plot is not desired.

nmgr=max(graineuler(:,1)); % meshed grains
colormap=zeros(nmgr,3);
for i=1:nmgr
    colormap(i,1)=rand;
    colormap(i,2)=rand;
    colormap(i,3)=rand;
    for j=1:3
        colormap(i,j)=colormap(i,j)/norm(colormap(i,:));
    end
end
disp ('figure generation initiated')
tic
nm=max(size(createdmesh)); % number of mesh
% fig1 = figure(1);
% axes1 = axes('Parent',fig1,'FontSize',12);
% hold on
% parfor i=1: nm
%     plot3(createdmesh(i,2),createdmesh(i,3),createdmesh(i,4),'.', 'MarkerSize',15,'Color', colormap(createdmesh(i,1),:))
%     
% end
% xlabel('x')
% ylabel('y')
% zlabel('z')
% view(100,46)
% axis([-246 236 -208 180 -157 171])
toc
%% This is to post process on local grain neighbours
% system(['neighbourfix.exe < ' fname]);
neighbours=importdata ('modifiedneigh4matlab.dat'); % neighbours of each meshed grain 
%% *** importing exp data
exp5n=importdata('esrf5n.dat');
exp150n=importdata('esrf150n.dat');
exp300n=importdata('esrf300n.dat');
exp310n=importdata('esrf310n.dat');
exp315n=importdata('esrf315n.dat');
exp316n=importdata('esrf316n.dat');
exp325n=importdata('esrf325n.dat');



exp5n(:,4:6)=exp5n(:,4:6)*1000;
exp150n(:,4:6)=exp150n(:,4:6)*1000;
exp300n(:,4:6)=exp300n(:,4:6)*1000;
exp310n(:,4:6)=exp310n(:,4:6)*1000;
exp315n(:,4:6)=exp315n(:,4:6)*1000;
exp316n(:,4:6)=exp316n(:,4:6)*1000;
exp325n(:,4:6)=exp325n(:,4:6)*1000;



locmat=[min(exp5n(:,4)) max(exp5n(:,4)) min(exp5n(:,5)) max(exp5n(:,5)) min(exp5n(:,6)) max(exp5n(:,6));...
        min(exp150n(:,4)) max(exp150n(:,4)) min(exp150n(:,5)) max(exp150n(:,5)) min(exp150n(:,6)) max(exp150n(:,6));...
        min(exp300n(:,4)) max(exp300n(:,4)) min(exp300n(:,5)) max(exp300n(:,5)) min(exp300n(:,6)) max(exp300n(:,6));...
        min(exp310n(:,4)) max(exp310n(:,4)) min(exp310n(:,5)) max(exp310n(:,5)) min(exp310n(:,6)) max(exp310n(:,6));...
        min(exp315n(:,4)) max(exp315n(:,4)) min(exp315n(:,5)) max(exp315n(:,5)) min(exp315n(:,6)) max(exp315n(:,6));...
        min(exp316n(:,4)) max(exp316n(:,4)) min(exp316n(:,5)) max(exp316n(:,5)) min(exp316n(:,6)) max(exp316n(:,6));...
        min(exp325n(:,4)) max(exp325n(:,4)) min(exp325n(:,5)) max(exp325n(:,5)) min(exp325n(:,6)) max(exp325n(:,6))]; 

%%% this is to fix voulmes
xt=0.4144+0.3694;
yt=0.4067+0.4062;
zt=0.4702+0.4779;
xt=locmat(1,2)-locmat(1,1);
yt=locmat(1,4)-locmat(1,3);
zt=locmat(1,6)-locmat(1,5);
vt=xt*yt*zt; %to convert to micron...

sz5n=size(exp5n);
nogrn5n=sz5n(1);
mrelvol=sum(exp5n(:,3));

mavvol=vt/nogrn5n; %makes sense
mavdg=(6*mavvol/pi)^(1/3); %makes sense...

vgrains=exp5n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp5n(:,3)= vgrains(:);  %% to store real volumes


clear vgrains  %%150N
xt=locmat(2,2)-locmat(2,1);
yt=locmat(2,4)-locmat(2,3);
zt=locmat(2,6)-locmat(2,5);
vt=xt*yt*zt;
sz150n=size(exp150n);
nogrn150n=sz150n(1);
mrelvol=sum(exp150n(:,3));

mavvol=vt/nogrn150n; %makes sense
mavdg=(6*mavvol/pi)^(1/3); %makes sense...

vgrains=exp150n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp150n(:,3)= vgrains(:);  %% to store real volumes


clear vgrains  %300N
xt=locmat(3,2)-locmat(3,1);
yt=locmat(3,4)-locmat(3,3);
zt=locmat(3,6)-locmat(3,5);
vt=xt*yt*zt;
sz300n=size(exp300n);
nogrn300n=sz300n(1);
mrelvol=sum(exp300n(:,3));
mavvol=vt/nogrn300n; %makes sense
mavdg=(6*mavvol/pi)^(1/3) %makes sense...
vgrains=exp300n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp300n(:,3)= vgrains(:);  %% to store real volumes

clear vgrains  %310N
xt=locmat(4,2)-locmat(4,1);
yt=locmat(4,4)-locmat(4,3);
zt=locmat(4,6)-locmat(4,5);
vt=xt*yt*zt;
sz310n=size(exp310n);
nogrn310n=sz310n(1);
mrelvol=sum(exp310n(:,3));
mavvol=vt/nogrn310n; %makes sense
mavdg=(6*mavvol/pi)^(1/3) %makes sense...
vgrains=exp310n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp310n(:,3)= vgrains(:);  %% to store real volumes

clear vgrains  %315N
xt=locmat(5,2)-locmat(5,1);
yt=locmat(5,4)-locmat(5,3);
zt=locmat(5,6)-locmat(5,5);
vt=xt*yt*zt;
sz315n=size(exp315n);
nogrn315n=sz315n(1);
mrelvol=sum(exp315n(:,3));
mavvol=vt/nogrn315n; %makes sense
mavdg=(6*mavvol/pi)^(1/3) %makes sense...
vgrains=exp315n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp315n(:,3)= vgrains(:);  %% to store real volumes

clear vgrains  %316N
xt=locmat(6,2)-locmat(6,1);
yt=locmat(6,4)-locmat(6,3);
zt=locmat(6,6)-locmat(6,5);
vt=xt*yt*zt;
sz316n=size(exp316n);
nogrn316n=sz316n(1);
mrelvol=sum(exp316n(:,3));
mavvol=vt/nogrn316n; %makes sense
mavdg=(6*mavvol/pi)^(1/3) %makes sense...
vgrains=exp316n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp316n(:,3)= vgrains(:);  %% to store real volumes

clear vgrains  %325N
xt=locmat(7,2)-locmat(7,1);
yt=locmat(7,4)-locmat(7,3);
zt=locmat(7,6)-locmat(7,5);
vt=xt*yt*zt;
sz325n=size(exp325n);
nogrn325n=sz325n(1);
mrelvol=sum(exp325n(:,3));
mavvol=vt/nogrn325n; %makes sense
mavdg=(6*mavvol/pi)^(1/3) %makes sense...
vgrains=exp325n(:,3)*vt/mrelvol; % this is to convert the relative volumes to real ones
dgrains=(6*vgrains/pi).^(1/3);
exp325n(:,3)= vgrains(:);  %% to store real volumes


%% *******Now starting the local effects***********
%% Here we check the force equilibrium equations:
idstrn=24;
idstrs=36;
% here we cut the edge grains
x0in=x0+50;   
y0in=y0+50;   
z0in=z0+50;     
x1in=xfin-50;  
y1in=yfin-50;  
z1in=zfin-50;  
 % for the first step:
szexp0=max(size(exp5n));
idr0=0;
r0=zeros(6,szexp0);

for i=1:szexp0
    if (mod(i,1000) == 1000) 
       disp(i) 
    end
    if (exp5n(i,43)== 0) % parent grain
        if ((exp5n(i,4)> x0in & exp5n(i,4) < x1in) & ...
            (exp5n(i,5)> y0in & exp5n(i,5) < y1in) & ...
            (exp5n(i,6)> z0in & exp5n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp5n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               idr0=idr0+1;
               grainr(idr0)=exp5n(i,1); %grain number
               r0(:,idr0)=exp5n(i,idstrs+1:idstrs+6)*exp5n(i,3);
               v0=exp5n(i,3);
               for j=1:ngb
                   idgn=find (exp5n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                   v0=v0+exp5n(idgn,3);
                   for k=1:6
                       r0(k,idr0)=r0(k,idr0)-exp5n(idgn,idstrs+k)*exp5n(idgn,3);
                   end
               end
               r0(:,idr0)=r0(:,idr0)/v0;
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr0=zeros(1,idr0);
normrg=zeros(1,idr0);
for i=1: idr0
    tens(1,1)=r0(1,i);
    tens(2,2)=r0(2,i);
    tens(3,3)=r0(3,i);
    tens(2,3)=r0(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r0(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r0(6,i);
    tens(2,1)=tens(1,2);
    normr0(i)=norm(tens);
    
    idg=find (exp5n(:,1)==grainr(i));
    tensg(1,1)=exp5n(idg,idstrs+1);
    tensg(2,2)=exp5n(idg,idstrs+2);
    tensg(3,3)=exp5n(idg,idstrs+3);
    tensg(2,3)=exp5n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp5n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp5n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg(i)=norm(tensg);
end

gr_id=grainr(1:idr0);

fig1 = figure(1);
axes1 = axes('Parent',fig1,'FontSize',12);
plot(gr_id,normr0, 'o','LineWidth',2)
xlabel('grain number','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)

grid on
title ('Step 0: 5N','fontsize',14 ) 

    
fig2 = figure(2);
axes2 = axes('Parent',fig2,'FontSize',12);
plot(normrg,normr0, 'o','LineWidth',2)
xlabel('Strees norm in the each grain','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)
axis([0 400 0 400])
grid on
title ('Step 0: 5N','fontsize',14 ) 

disp ('plotting for second step')
 % for the Second step:
szexp1=max(size(exp150n));
idr1=0;
r1=zeros(6,szexp1);

for i=1:szexp1
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp150n(i,43)== 0) % parent grain
        if ((exp150n(i,4)> x0in & exp150n(i,4) < x1in) & ...
            (exp150n(i,5)> y0in & exp150n(i,5) < y1in) & ...
            (exp150n(i,6)> z0in & exp150n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp150n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp150n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr1=idr1+1;
                   grainr1(idr1)=exp150n(i,1); %grain number
                   r1(:,idr1)=exp150n(i,idstrs+1:idstrs+6)*exp150n(i,3);
                   v1=exp150n(i,3);
                   for j=1:ngb
                       idgn=find (exp150n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v1=v1+exp150n(idgn,3);
                       for k=1:6
                           r1(k,idr1)=r1(k,idr1)-exp150n(idgn,idstrs+k)*exp150n(idgn,3);
                       end
                   end
                   r1(:,idr1)=r1(:,idr1)/v1;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr1=zeros(1,idr1);
normrg1=zeros(1,idr1);
for i=1: idr1
    tens(1,1)=r1(1,i);
    tens(2,2)=r1(2,i);
    tens(3,3)=r1(3,i);
    tens(2,3)=r1(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r1(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r1(6,i);
    tens(2,1)=tens(1,2);
    normr1(i)=norm(tens);
    
    idg=find (exp150n(:,1)==grainr1(i));
    tensg(1,1)=exp150n(idg,idstrs+1);
    tensg(2,2)=exp150n(idg,idstrs+2);
    tensg(3,3)=exp150n(idg,idstrs+3);
    tensg(2,3)=exp150n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp150n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp150n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg1(i)=norm(tensg);
end

gr_id1=grainr1(1:idr1);

fig3 = figure(3);
axes3 = axes('Parent',fig3,'FontSize',12);
plot(gr_id1,normr1, 'o','LineWidth',2)
xlabel('grain number','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)
title ('Step 1: 150N','fontsize',14 ) 


grid on

    
fig4 = figure(4);
axes4 = axes('Parent',fig4,'FontSize',12);
plot(normrg1,normr1, 'o','LineWidth',2)
xlabel('Strees norm in the each grain','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)
axis([0 600 0 400])
grid on
title ('Step-2','fontsize',14 ) 
axh = gca;
set(axh,'XTick',[0:100:600]);
set(axh,'YTick',[0:50:400]);
 
%third step: 2

szexp2=max(size(exp300n));
idr2=0;
r2=zeros(6,szexp2);

for i=1:szexp2
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp300n(i,43)== 0) % parent grain
        if ((exp300n(i,4)> x0in & exp300n(i,4) < x1in) & ...
            (exp300n(i,5)> y0in & exp300n(i,5) < y1in) & ...
            (exp300n(i,6)> z0in & exp300n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp300n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp300n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr2=idr2+1;
                   grainr2(idr2)=exp300n(i,1); %grain number
                   r2(:,idr2)=exp300n(i,idstrs+1:idstrs+6)*exp300n(i,3);
                   v2=exp300n(i,3);
                   for j=1:ngb
                       idgn=find (exp300n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v2=v2+exp300n(idgn,3);
                       for k=1:6
                           r2(k,idr2)=r2(k,idr2)-exp300n(idgn,idstrs+k)*exp300n(idgn,3);
                       end
                   end
                   r2(:,idr2)=r2(:,idr2)/v2;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr2=zeros(1,idr2);
normrg2=zeros(1,idr2);
for i=1: idr2
    tens(1,1)=r2(1,i);
    tens(2,2)=r2(2,i);
    tens(3,3)=r2(3,i);
    tens(2,3)=r2(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r2(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r2(6,i);
    tens(2,1)=tens(1,2);
    normr2(i)=norm(tens);
    
    idg=find (exp300n(:,1)==grainr2(i));
    tensg(1,1)=exp300n(idg,idstrs+1);
    tensg(2,2)=exp300n(idg,idstrs+2);
    tensg(3,3)=exp300n(idg,idstrs+3);
    tensg(2,3)=exp300n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp300n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp300n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg2(i)=norm(tensg);
end

gr_id2=grainr2(1:idr2);

fig5 = figure(5);
axes5 = axes('Parent',fig5,'FontSize',12);
plot(gr_id2,normr2, 'o','LineWidth',2)
xlabel('grain number','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)
title ('Step 2: 300N','fontsize',14 ) 


grid on

    
fig6= figure(6);
axes6 = axes('Parent',fig6,'FontSize',12);
plot(normrg2,normr2, 'o','LineWidth',2)
xlabel('Strees norm in the each grain','fontsize',14)
ylabel('deviation from force equilibrium (MPa)','fontsize',14)
axis([0 600 0 500])
grid on
title ('Step 2: 300N','fontsize',14 ) 




%fourth step: 3

szexp3=max(size(exp310n));
idr3=0;
r3=zeros(6,szexp3);

for i=1:szexp3
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp310n(i,43)== 0) % parent grain
        if ((exp310n(i,4)> x0in & exp310n(i,4) < x1in) & ...
            (exp310n(i,5)> y0in && exp310n(i,5) < y1in) & ...
            (exp310n(i,6)> z0in & exp310n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp310n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp310n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr3=idr3+1;
                   grainr3(idr3)=exp310n(i,1); %grain number
                   r3(:,idr3)=exp310n(i,idstrs+1:idstrs+6)*exp310n(i,3);
                   v3=exp310n(i,3);
                   for j=1:ngb
                       idgn=find (exp310n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v3=v3+exp310n(idgn,3);
                       for k=1:6
                           r3(k,idr3)=r3(k,idr3)-exp310n(idgn,idstrs+k)*exp310n(idgn,3);
                       end
                   end
                   r3(:,idr3)=r3(:,idr3)/v3;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr3=zeros(1,idr3);
normrg3=zeros(1,idr3);
for i=1: idr3
    tens(1,1)=r3(1,i);
    tens(2,2)=r3(2,i);
    tens(3,3)=r3(3,i);
    tens(2,3)=r3(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r3(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r3(6,i);
    tens(2,1)=tens(1,2);
    normr3(i)=norm(tens);
    
    idg=find (exp310n(:,1)==grainr3(i));
    tensg(1,1)=exp310n(idg,idstrs+1);
    tensg(2,2)=exp310n(idg,idstrs+2);
    tensg(3,3)=exp310n(idg,idstrs+3);
    tensg(2,3)=exp310n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp310n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp310n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg3(i)=norm(tensg);
end

if (idr3 ~=0) 
    gr_id3=grainr3(1:idr3);

   fig7 = figure(7);
   axes7 = axes('Parent',fig7,'FontSize',12);
   plot(gr_id3,normr3, 'o','LineWidth',2)
   xlabel('grain number','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   title ('Step 3: 310N','fontsize',14 ) 


   grid on

    
   fig8= figure(8);
   axes8 = axes('Parent',fig8,'FontSize',12);
    plot(normrg3,normr3, 'o','LineWidth',2)
   xlabel('Strees norm in the each grain','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)

  grid on
  title ('Step 3: 310N','fontsize',14 ) 
end

%% Adding steps from ESRF exps
%fifth step: 4

szexp4=max(size(exp315n));
idr4=0;
r4=zeros(6,szexp4);

for i=1:szexp4
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp315n(i,43)== 0) % parent grain
        if ((exp315n(i,4)> x0in & exp315n(i,4) < x1in) & ...
            (exp315n(i,5)> y0in && exp315n(i,5) < y1in) & ...
            (exp315n(i,6)> z0in & exp315n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp315n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp315n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr4=idr4+1;
                   grainr4(idr4)=exp315n(i,1); %grain number
                   r4(:,idr4)=exp315n(i,idstrs+1:idstrs+6)*exp315n(i,3);
                   v4=exp315n(i,3);
                   for j=1:ngb
                       idgn=find (exp315n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v4=v4+exp315n(idgn,3);
                       for k=1:6
                           r4(k,idr4)=r4(k,idr4)-exp315n(idgn,idstrs+k)*exp315n(idgn,3);
                       end
                   end
                   r4(:,idr4)=r4(:,idr4)/v4;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr4=zeros(1,idr4);
normrg4=zeros(1,idr4);
for i=1: idr4
    tens(1,1)=r4(1,i);
    tens(2,2)=r4(2,i);
    tens(3,3)=r4(3,i);
    tens(2,3)=r4(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r4(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r4(6,i);
    tens(2,1)=tens(1,2);
    normr4(i)=norm(tens);
    
    idg=find (exp315n(:,1)==grainr4(i));
    tensg(1,1)=exp315n(idg,idstrs+1);
    tensg(2,2)=exp315n(idg,idstrs+2);
    tensg(3,3)=exp315n(idg,idstrs+3);
    tensg(2,3)=exp315n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp315n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp315n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg4(i)=norm(tensg);
end

if (idr4 ~=0) 
    gr_id4=grainr4(1:idr4);

   fig701 = figure(701);
   axes701 = axes('Parent',fig701,'FontSize',12);
   plot(gr_id4,normr4, 'o','LineWidth',2)
   xlabel('grain number','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   title ('Step 4: 315N','fontsize',14 ) 


   grid on

    
   fig801= figure(801);
   axes801 = axes('Parent',fig801,'FontSize',12);
    plot(normrg4,normr4, 'o','LineWidth',2)
   xlabel('Strees norm in the each grain','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   axis([0 800 0 600])
  grid on
  title ('Step 4: 315N','fontsize',14 ) 
end



%sixtth step: 5: 316N

szexp5=max(size(exp316n));
idr5=0;
r5=zeros(6,szexp5);

for i=1:szexp5
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp316n(i,43)== 0) % parent grain
        if ((exp316n(i,4)> x0in & exp316n(i,4) < x1in) & ...
            (exp316n(i,5)> y0in && exp316n(i,5) < y1in) & ...
            (exp316n(i,6)> z0in & exp316n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp316n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp316n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr5=idr5+1;
                   grainr5(idr5)=exp316n(i,1); %grain number
                   r5(:,idr5)=exp316n(i,idstrs+1:idstrs+6)*exp316n(i,3);
                   v5=exp316n(i,3);
                   for j=1:ngb
                       idgn=find (exp316n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v5=v5+exp316n(idgn,3);
                       for k=1:6
                           r5(k,idr5)=r5(k,idr5)-exp316n(idgn,idstrs+k)*exp316n(idgn,3);
                       end
                   end
                   r5(:,idr5)=r5(:,idr5)/v5;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr5=zeros(1,idr5);
normrg5=zeros(1,idr5);
for i=1: idr5
    tens(1,1)=r5(1,i);
    tens(2,2)=r5(2,i);
    tens(3,3)=r5(3,i);
    tens(2,3)=r5(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r5(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r5(6,i);
    tens(2,1)=tens(1,2);
    normr5(i)=norm(tens);
    
    idg=find (exp316n(:,1)==grainr5(i));
    tensg(1,1)=exp316n(idg,idstrs+1);
    tensg(2,2)=exp316n(idg,idstrs+2);
    tensg(3,3)=exp316n(idg,idstrs+3);
    tensg(2,3)=exp316n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp316n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp316n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg5(i)=norm(tensg);
end

if (idr5 ~=0) 
    gr_id5=grainr5(1:idr5);

   fig702 = figure(702);
   axes702 = axes('Parent',fig702,'FontSize',12);
   plot(gr_id5,normr5, 'o','LineWidth',2)
   xlabel('grain number','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   title ('Step 5: 316N','fontsize',14 ) 


   grid on

    
   fig802= figure(802);
   axes802 = axes('Parent',fig802,'FontSize',12);
    plot(normrg5,normr5, 'o','LineWidth',2)
   xlabel('Strees norm in the each grain','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)

  grid on
  title ('Step 5: 316N','fontsize',14 ) 
end



%seventh step: 6: 325N

szexp6=max(size(exp325n));
idr6=0;
r6=zeros(6,szexp6);

for i=1:szexp6
    if (mod(i,1000) == 0) 
       disp(i) 
    end
    if (exp325n(i,43)== 0) % parent grain
        if ((exp325n(i,4)> x0in & exp325n(i,4) < x1in) & ...
            (exp325n(i,5)> y0in && exp325n(i,5) < y1in) & ...
            (exp325n(i,6)> z0in & exp325n(i,6) < z1in))
           idg=find (neighbours(:,1)==exp325n(i,1)); %finding the grain
           if (isempty(idg)==0 )
               ngb=neighbours(idg,2); % number of neighbours
               
               idtst=1;
               for jj=1:ngb
                   idgn=find (exp325n(:,1)==neighbours(idg,2+jj));
                   if (isempty(idgn)==1) 
                       idtst=0; % This grain will not be checked as it's not capture in the next step
                   end
                   
               end
               
               if (idtst ==1) 
                   idr6=idr6+1;
                   grainr6(idr6)=exp325n(i,1); %grain number
                   r6(:,idr6)=exp325n(i,idstrs+1:idstrs+6)*exp325n(i,3);
                   v6=exp325n(i,3);
                   for j=1:ngb
                       idgn=find (exp325n(:,1)==neighbours(idg,2+j)); %finding the neighbouring grain
                       v6=v6+exp325n(idgn,3);
                       for k=1:6
                           r6(k,idr6)=r6(k,idr6)-exp325n(idgn,idstrs+k)*exp325n(idgn,3);
                       end
                   end
                   r6(:,idr6)=r6(:,idr6)/v6;
               end
           end
        end
    end
end

%%%%*** checking the norm of the residual stress***

normr6=zeros(1,idr6);
normrg6=zeros(1,idr6);
for i=1: idr6
    tens(1,1)=r6(1,i);
    tens(2,2)=r6(2,i);
    tens(3,3)=r6(3,i);
    tens(2,3)=r6(4,i);
    tens(3,2)=tens(2,3);
    tens(1,3)=r6(5,i);
    tens(3,1)=tens(1,3);
    tens(1,2)=r6(6,i);
    tens(2,1)=tens(1,2);
    normr6(i)=norm(tens);
    
    idg=find (exp325n(:,1)==grainr6(i));
    tensg(1,1)=exp325n(idg,idstrs+1);
    tensg(2,2)=exp325n(idg,idstrs+2);
    tensg(3,3)=exp325n(idg,idstrs+3);
    tensg(2,3)=exp325n(idg,idstrs+4);
    tensg(3,2)=tensg(2,3);
    tensg(1,3)=exp325n(idg,idstrs+5);
    tensg(3,1)=tensg(1,3);
    tensg(1,2)=exp325n(idg,idstrs+6);
    tensg(2,1)=tensg(1,2);
    normrg6(i)=norm(tensg);
end

if (idr6 ~=0) 
    gr_id6=grainr6(1:idr6);

   fig703 = figure(703);
   axes703 = axes('Parent',fig703,'FontSize',12);
   plot(gr_id6,normr6, 'o','LineWidth',2)
   xlabel('grain number','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   title ('Step 6: 325N','fontsize',14 ) 


   grid on

    
   fig803= figure(803);
   axes803 = axes('Parent',fig803,'FontSize',12);
    plot(normrg6,normr6, 'o','LineWidth',2)
   xlabel('Strees norm in the each grain','fontsize',14)
   ylabel('deviation from force equilibrium (MPa)','fontsize',14)
   axis([0 800 0 600])
  grid on
  title ('Step 6: 325N','fontsize',14 ) 
end

%% This is to shape the normal to the boundaries for common neighbours
% the idea is to find tracktion force at the boundaries of the two neighbours and
% check the force equilibrium condition. Traction Force varion at the common boundary
% can potentially represent the stress variation inside each grain; so it will be useful 
% for finding how accurate the stress variation across twin plane is...

% system(['boundary.exe < ' fname]);
% boundary_ar=importdata ('boundary_area.dat'); % neighbours of each meshed grain 
%% now checking the force equilibrium
% 
% 
% % for the Second step:
% tractionerr=zeros(1,70*szexp0);
% corrsnorm=zeros(1,70*szexp0);
% misortrac=zeros(1,70*szexp0);
% gr_tr_id0=zeros(1,70*szexp0);
% idtrac=0;
% unitarea=nstpsz^2;
% 
% 
% for i=1:szexp0
%     
%     if (mod(i,1000) == 0) 
%        disp(i) 
%     end
%     if (exp5n(i,43)== 0) % parent grain
%         idg=find (neighbours(:,1)==exp5n(i,1)); %finding the grain
%         if (isempty(idg)==0 )
%             ngb=neighbours(idg,2); % number of neighbours
%             idtst=1;
%             for j=1:ngb
%                 neigim=neighbours(idg,2+j);
%                 rw1=find(boundary_ar(:,1)==i);
%                 rw2=find(boundary_ar(rw1,4)==neigim);
%                 it=0; %normal is not found
%                 for k=1:3
%                     if (boundary_ar(rw2,4+k) ~= 0) 
%                         it=it+1;
%                     end
%                 end
%                 if (it ~= 0) %normal found
%                     
%                     %shaping stess tensore in the current grain
%                     
%                     scg(1,1)=exp5n(i,idstrs+1);
%                     scg(2,2)=exp5n(i,idstrs+2);
%                     scg(3,3)=exp5n(i,idstrs+3);
%                     
%                     scg(2,3)=exp5n(i,idstrs+4);
%                     scg(3,2)=scg(2,3);
%                     scg(1,3)=exp5n(i,idstrs+5);
%                     scg(3,1)=scg(1,3);
%                     scg(1,2)=exp5n(i,idstrs+6);
%                     scg(2,1)=scg(1,2);
%                     
%                     %shaping stress tensor in the neighbour
%                     idngrn=find(exp5n(:,1)==neigim);
%                     sng(1,1)=exp5n(idngrn,idstrs+1);
%                     sng(2,2)=exp5n(idngrn,idstrs+2);
%                     sng(3,3)=exp5n(idngrn,idstrs+3);
%                     
%                     sng(2,3)=exp5n(idngrn,idstrs+4);
%                     sng(3,2)=sng(2,3);
%                     sng(1,3)=exp5n(idngrn,idstrs+5);
%                     sng(3,1)=sng(1,3);
%                     sng(1,2)=exp5n(idngrn,idstrs+6);
%                     sng(2,1)=sng(1,2);
%                     %%% Now shaping the traction force
%                     idtrac=idtrac+1;
%                     forcc=zeros(1,3);
%                     forcn=zeros(1,3);
%                     for k=1:3
%                         for kk=1:3
%                             forcc(k)=forcc(k)+scg(k,kk)*boundary_ar(rw2,4+kk);
%                             forcn(k)=forcn(k)+sng(k,kk)*boundary_ar(rw2,4+kk);
%                         end
%                     end
%                     forcres=forcc+forcn;
%                     tractionerr(idtrac)=norm(forcres);
%                     corrsnorm(idtrac)=norm(scg);
%                     gr_tr_id0(idtrac)=exp5n(i,1);
%                     
%                 end
%                 
%            
%             
%            end
%         end
%     end
% end
% 
% 
% 
% 
% 
% fig9 = figure(9);
% axes9 = axes('Parent',fig9,'FontSize',12);
% plot(gr_tr_id0,tractionerr, 'o','LineWidth',2)
% xlabel('grain number','fontsize',14)
% ylabel('Tractions deviation from force equilibrium (MPa) ','fontsize',14)
% title ('Step 0','fontsize',14 ) 
% grid on
% 
%     
% fig10 = figure(10);
% axes10 = axes('Parent',fig10,'FontSize',12);
% plot(corrsnorm,tractionerr, 'o','LineWidth',2)
% xlabel('Strees norm in the each grain','fontsize',14)
% ylabel('Traction deviation from force equilibrium (MPa)','fontsize',14)
% 
% grid on
% title ('Step 0','fontsize',14 ) 
%                
% % second  step: 1           
% tractionerr1=zeros(1,70*szexp0);
% corrsnorm1=zeros(1,70*szexp0);
% misortrac1=zeros(1,70*szexp0);
% gr_tr_id1=zeros(1,70*szexp0);
% idtrac1=0;
% unitarea=nstpsz^2;
% 
% 
% for i=1:szexp1
%     
%     if (mod(i,1000) == 0) 
%        disp(i) 
%     end
%     if (exp150n(i,43)== 0) % parent grain
%         idg=find (neighbours(:,1)==exp150n(i,1)); %finding the grain
%         if (isempty(idg)==0 )
%             ngb=neighbours(idg,2); % number of neighbours
%             idtst=1;
%             for j=1:ngb
%                 neigim=neighbours(idg,2+j);
%                 rw1=find(boundary_ar(:,1)==i);
%                 rw2=find(boundary_ar(rw1,4)==neigim);
%                 idngrn=find(exp150n(:,1)==neigim);
%                 if (isempty(idngrn) ==0)
%                     it=0; %normal is not found
%                     for k=1:3
%                         if (boundary_ar(rw2,4+k) ~= 0)
%                             it=it+1;
%                         end
%                     end
%                     if (it ~= 0) %normal found
%                         
%                     
%                     %shaping stess tensore in the current grain
%                     
%                         scg(1,1)=exp150n(i,idstrs+1);
%                         scg(2,2)=exp150n(i,idstrs+2);
%                         scg(3,3)=exp150n(i,idstrs+3);
%                     
%                         scg(2,3)=exp150n(i,idstrs+4);
%                         scg(3,2)=scg(2,3);
%                         scg(1,3)=exp150n(i,idstrs+5);
%                         scg(3,1)=scg(1,3);
%                         scg(1,2)=exp150n(i,idstrs+6);
%                         scg(2,1)=scg(1,2);
%                     
%                     %shaping stress tensor in the neighbour
%                     
%                     
%                        sng(1,1)=exp150n(idngrn,idstrs+1);
%                        sng(2,2)=exp150n(idngrn,idstrs+2);
%                        sng(3,3)=exp150n(idngrn,idstrs+3);
%                     
%                        sng(2,3)=exp150n(idngrn,idstrs+4);
%                        sng(3,2)=sng(2,3);
%                        sng(1,3)=exp150n(idngrn,idstrs+5);
%                        sng(3,1)=sng(1,3);
%                        sng(1,2)=exp150n(idngrn,idstrs+6);
%                        sng(2,1)=sng(1,2);
%                     %%% Now shaping the traction force
%                        idtrac1=idtrac1+1;
%                        forcc=zeros(1,3);
%                        forcn=zeros(1,3);
%                        for k=1:3
%                           for kk=1:3
%                                forcc(k)=forcc(k)+scg(k,kk)*boundary_ar(rw2,4+kk);
%                                forcn(k)=forcn(k)+sng(k,kk)*boundary_ar(rw2,4+kk);
%                           end
%                        end
%                        forcres=forcc+forcn;
%                        tractionerr1(idtrac1)=norm(forcres);
%                        corrsnorm1(idtrac1)=norm(scg);
%                        gr_tr_id1(idtrac1)=exp150n(i,1);
%                     
%                     end
%                 end
%                 
%            
%             
%            end
%         end
%     end
% end
% 
% 
% 
% 
% 
% fig11 = figure(11);
% axes11 = axes('Parent',fig11,'FontSize',12);
% plot(gr_tr_id1,tractionerr1, 'o','LineWidth',2)
% xlabel('grain number','fontsize',14)
% ylabel('Tractions deviation from force equilibrium (MPa) ','fontsize',14)
% title ('Step 1','fontsize',14 ) 
% grid on
% 
%     
% fig12 = figure(12);
% axes12 = axes('Parent',fig12,'FontSize',12);
% plot(corrsnorm1,tractionerr1, 'o','LineWidth',2)
% xlabel('Strees norm in the each grain','fontsize',14)
% ylabel('Traction deviation from force equilibrium (MPa)','fontsize',14)
% 
% grid on
% title ('Step 1','fontsize',14 ) 
%           
%         
% % third  step: 2           
% tractionerr2=zeros(1,70*szexp0);
% corrsnorm2=zeros(1,70*szexp0);
% misortrac2=zeros(1,70*szexp0);
% gr_tr_id2=zeros(1,70*szexp0);
% idtrac2=0;
% unitarea=nstpsz^2;
% 
% 
% for i=1:szexp2
%     
%     if (mod(i,1000) == 0) 
%        disp(i) 
%     end
%     if (exp300n(i,43)== 0) % parent grain
%         idg=find (neighbours(:,1)==exp300n(i,1)); %finding the grain
%         if (isempty(idg)==0 )
%             ngb=neighbours(idg,2); % number of neighbours
%             idtst=1;
%             for j=1:ngb
%                 neigim=neighbours(idg,2+j);
%                 rw1=find(boundary_ar(:,1)==i);
%                 rw2=find(boundary_ar(rw1,4)==neigim);
%                 idngrn=find(exp300n(:,1)==neigim);
%                 if (isempty(idngrn) ==0)
%                     it=0; %normal is not found
%                     for k=1:3
%                         if (boundary_ar(rw2,4+k) ~= 0)
%                             it=it+1;
%                         end
%                     end
%                     if (it ~= 0) %normal found
%                         
%                     
%                     %shaping stess tensore in the current grain
%                     
%                         scg(1,1)=exp300n(i,idstrs+1);
%                         scg(2,2)=exp300n(i,idstrs+2);
%                         scg(3,3)=exp300n(i,idstrs+3);
%                     
%                         scg(2,3)=exp300n(i,idstrs+4);
%                         scg(3,2)=scg(2,3);
%                         scg(1,3)=exp300n(i,idstrs+5);
%                         scg(3,1)=scg(1,3);
%                         scg(1,2)=exp300n(i,idstrs+6);
%                         scg(2,1)=scg(1,2);
%                     
%                     %shaping stress tensor in the neighbour
%                     
%                     
%                        sng(1,1)=exp300n(idngrn,idstrs+1);
%                        sng(2,2)=exp300n(idngrn,idstrs+2);
%                        sng(3,3)=exp300n(idngrn,idstrs+3);
%                     
%                        sng(2,3)=exp300n(idngrn,idstrs+4);
%                        sng(3,2)=sng(2,3);
%                        sng(1,3)=exp300n(idngrn,idstrs+5);
%                        sng(3,1)=sng(1,3);
%                        sng(1,2)=exp300n(idngrn,idstrs+6);
%                        sng(2,1)=sng(1,2);
%                     %%% Now shaping the traction force
%                        idtrac2=idtrac2+1;
%                        forcc=zeros(1,3);
%                        forcn=zeros(1,3);
%                        for k=1:3
%                           for kk=1:3
%                                forcc(k)=forcc(k)+scg(k,kk)*boundary_ar(rw2,4+kk);
%                                forcn(k)=forcn(k)+sng(k,kk)*boundary_ar(rw2,4+kk);
%                           end
%                        end
%                        forcres=forcc+forcn;
%                        tractionerr2(idtrac2)=norm(forcres);
%                        corrsnorm2(idtrac2)=norm(scg);
%                        gr_tr_id2(idtrac2)=exp300n(i,1);
%                     
%                     end
%                 end
%                 
%            
%             
%            end
%         end
%     end
% end
% 
% 
% 
% 
% 
% fig13 = figure(13);
% axes13 = axes('Parent',fig13,'FontSize',12);
% plot(gr_tr_id2,tractionerr2, 'o','LineWidth',2)
% xlabel('grain number','fontsize',14)
% ylabel('Tractions deviation from force equilibrium (MPa) ','fontsize',14)
% title ('Step 2','fontsize',14 ) 
% grid on
% 
%     
% fig14 = figure(14);
% axes14 = axes('Parent',fig14,'FontSize',12);
% plot(corrsnorm2,tractionerr2, 'o','LineWidth',2)
% xlabel('Strees norm in the each grain','fontsize',14)
% ylabel('Traction deviation from force equilibrium (MPa)','fontsize',14)
% 
% grid on
% title ('Step 2','fontsize',14 ) 
%         
% 
% 
% 
% % fourth  step: 3           
% tractionerr3=zeros(1,70*szexp0);
% corrsnorm3=zeros(1,70*szexp0);
% misortrac3=zeros(1,70*szexp0);
% gr_tr_id3=zeros(1,70*szexp0);
% idtrac3=0;
% unitarea=nstpsz^2;
% 
% 
% for i=1:szexp3
%     
%     if (mod(i,1000) == 0) 
%        disp(i) 
%     end
%     if (exp310n(i,43)== 0) % parent grain
%         idg=find (neighbours(:,1)==exp310n(i,1)); %finding the grain
%         if (isempty(idg)==0 )
%             ngb=neighbours(idg,2); % number of neighbours
%             idtst=1;
%             for j=1:ngb
%                 neigim=neighbours(idg,2+j);
%                 rw1=find(boundary_ar(:,1)==i);
%                 rw2=find(boundary_ar(rw1,4)==neigim);
%                 idngrn=find(exp310n(:,1)==neigim);
%                 if (isempty(idngrn) ==0)
%                     it=0; %normal is not found
%                     for k=1:3
%                         if (boundary_ar(rw2,4+k) ~= 0)
%                             it=it+1;
%                         end
%                     end
%                     if (it ~= 0) %normal found
%                         
%                     
%                     %shaping stess tensore in the current grain
%                     
%                         scg(1,1)=exp310n(i,idstrs+1);
%                         scg(2,2)=exp310n(i,idstrs+2);
%                         scg(3,3)=exp310n(i,idstrs+3);
%                     
%                         scg(2,3)=exp310n(i,idstrs+4);
%                         scg(3,2)=scg(2,3);
%                         scg(1,3)=exp310n(i,idstrs+5);
%                         scg(3,1)=scg(1,3);
%                         scg(1,2)=exp310n(i,idstrs+6);
%                         scg(2,1)=scg(1,2);
%                     
%                     %shaping stress tensor in the neighbour
%                     
%                     
%                        sng(1,1)=exp310n(idngrn,idstrs+1);
%                        sng(2,2)=exp310n(idngrn,idstrs+2);
%                        sng(3,3)=exp310n(idngrn,idstrs+3);
%                     
%                        sng(2,3)=exp310n(idngrn,idstrs+4);
%                        sng(3,2)=sng(2,3);
%                        sng(1,3)=exp310n(idngrn,idstrs+5);
%                        sng(3,1)=sng(1,3);
%                        sng(1,2)=exp310n(idngrn,idstrs+6);
%                        sng(2,1)=sng(1,2);
%                     %%% Now shaping the traction force
%                        idtrac3=idtrac3+1;
%                        forcc=zeros(1,3);
%                        forcn=zeros(1,3);
%                        for k=1:3
%                           for kk=1:3
%                                forcc(k)=forcc(k)+scg(k,kk)*boundary_ar(rw2,4+kk);
%                                forcn(k)=forcn(k)+sng(k,kk)*boundary_ar(rw2,4+kk);
%                           end
%                        end
%                        forcres=forcc+forcn;
%                        tractionerr3(idtrac3)=norm(forcres);
%                        corrsnorm3(idtrac3)=norm(scg);
%                        gr_tr_id3(idtrac3)=exp310n(i,1);
%                     
%                     end
%                 end
%                 
%            
%             
%            end
%         end
%     end
% end
% 
% 
% 
% 
% 
% fig15 = figure(15);
% axes15 = axes('Parent',fig15,'FontSize',12);
% plot(gr_tr_id3,tractionerr3, 'o','LineWidth',2)
% xlabel('grain number','fontsize',14)
% ylabel('Tractions deviation from force equilibrium (MPa) ','fontsize',14)
% title ('Step 3','fontsize',14 ) 
% grid on
% 
%     
% fig16 = figure(16);
% axes16 = axes('Parent',fig16,'FontSize',12);
% plot(corrsnorm3,tractionerr3, 'o','LineWidth',2)
% xlabel('Strees norm in the each grain','fontsize',14)
% ylabel('Traction deviation from force equilibrium (MPa)','fontsize',14)
% 
% grid on
% title ('Step 3','fontsize',14 ) 
%% Now producing grain misorientation file
% misormat=zeros(ngus,210); % misormat(1,1): grain number;  n1=misormat(1,2): number of neighbours; misormat(1,2:2+n1):neighbours ID; misormat(1,2+n1: 2+2n1): misorientation;  misormat(1,2+2n1: 2+3n1): basal misorientation
% disp('grain misorientation calculation');
% for i=1:szexp0
%     if (mod (i,100)==0) 
%          disp(i)
%     end
%     idg=find(neighbours(:,1)==i);
%      
%     if (isempty(idg) == 0)
%          misormat(i,1)=neighbours(idg,1);
%          ngb=neighbours(idg,2);
%          misormat(i,2)=ngb;
%         for j=1:ngb
%             ngbid=neighbours(idg,j+2);
%             idex=find(exp5n(:,1)==ngbid);
%             idg2=find(exp5n(:,1)==neighbours(idg,1));
%             rodr(1,:)=exp5n(idg2,7:9);
%             rodr(2,:)=exp5n(idex,7:9);
%             save ('misgrn.dat','rodr', '-ascii');
%             fname2='misgrn.dat';
%            [sts,resul1]=system(['C:\Users\Hamid\Documents\3dxrd\APS\Marta_files\run\misor.exe < ' fname2]);
%            resul2=str2num(resul1);
%           
%            misormat(i,2+j)=neighbours(idg,j+2);
%            misormat(i,2+j+ngb)=resul2(1);
%            misormat(i,2+j+2*ngb)=resul2(2);
%             
%         end
%                
%     end
% end

% system(['fullmisor.exe < ' fname]);
neighmisor=importdata ('neighmisor.dat');% neighmisor(1,1): grain number;  n1=neighmisor(1,2): number of neighbours; neighmisor(1,2:2+n1):neighbours ID; neighmisor(1,2+n1: 2+2n1): misorientation;  neighmisor(1,2+2n1: 2+3n1): basal misorientation
loadmisor=importdata ('loadmisor.dat');% 1: grain number, 2:4 euler angles; 5 misorientation of basal normal and loading direction
%% plot stress as function of mis orientations at the grain boundaries.
sznmis=max(size(neighmisor));
id0=0;
id1=0;
id2=0;
id3=0;
id4=0;
id5=0;
id6=0;

tet=0:5:90;
sztet=max(size(tet));
sztet0=sztet-1;
msiorgrndist=zeros(1,sztet); %misorientation distribution
msiorbasdist=zeros(1,sztet); %basal planes misorientation
msiorbaldist=zeros(1,sztet); %Basal plane normal misorinetation w.r.t. the loading direction
neighb_msiorbasdist=zeros(1,sztet); %number of neighbours as a function of basal planes misorientation

strsd=0:50:900;
szstrsd=max(size(strsd));
szstrsd0=szstrsd-1;

vomistrsdist=zeros(1,szstrsd); %vonmises distribution for the first step
nomistrsdist=zeros(1,szstrsd); %principal stress dist. for the first step
vomistrsdist1=zeros(1,szstrsd); %vonmises distribution for the second step
nomistrsdist1=zeros(1,szstrsd); %principal stress dist. for the second step
vomistrsdist2=zeros(1,szstrsd); %vonmises distribution for the third step
nomistrsdist2=zeros(1,szstrsd); %principal stress dist. for the third step
vomistrsdist3=zeros(1,szstrsd); %vonmises distribution for the fourth step
nomistrsdist3=zeros(1,szstrsd); %principal stress dist. for the fourth step
vomistrsdist4=zeros(1,szstrsd); %vonmises distribution for the 5 step
nomistrsdist4=zeros(1,szstrsd); %principal stress dist. for the 5 step
vomistrsdist5=zeros(1,szstrsd); %vonmises distribution for the 6 step
nomistrsdist5=zeros(1,szstrsd); %principal stress dist. for the 6 step
vomistrsdist6=zeros(1,szstrsd); %vonmises distribution for the 7 step
nomistrsdist6=zeros(1,szstrsd); %principal stress dist. for the 7 step


strsvsmisorbnd0=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the first step
strsvsbmisorbnd0=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the first step
strsvsmisorbnd1=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the second step
strsvsbmisorbnd1=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the second step
strsvsmisorbnd2=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the third step
strsvsbmisorbnd2=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the third step
strsvsmisorbnd3=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the fourth step
strsvsbmisorbnd3=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the fourth step
strsvsmisorbnd4=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the 5 step
strsvsbmisorbnd4=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the 5 step
strsvsmisorbnd5=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the 6 step
strsvsbmisorbnd5=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the 6 step
strsvsmisorbnd6=zeros(70*ngus,3); % stress vs total misorientation at the grain boundary for the 7 step
strsvsbmisorbnd6=zeros(70*ngus,3); % stress vs basal plane misorientation at the grain boundary for the 7 step


strsvsmisorbal0=zeros(sztet,ngus); % stress (vonmises) vs basal normal misorientation w.r.t external load first step
strsnmmisorbal0=zeros(sztet,ngus); % stress (principal) vs basal normal misorientation w.r.t external load first step
strsvsmisorbal1=zeros(sztet,ngus); % stress (vonmises) vs basal normal misorientation w.r.t external load second step
strsnmmisorbal1=zeros(sztet,ngus); % 
strsvsmisorbal2=zeros(sztet,ngus); % 
strsnmmisorbal2=zeros(sztet,ngus); % 
strsvsmisorbal3=zeros(sztet,ngus); % 
strsnmmisorbal3=zeros(sztet,ngus); % 
strsvsmisorbal4=zeros(sztet,ngus); % 
strsnmmisorbal4=zeros(sztet,ngus); % 
strsvsmisorbal5=zeros(sztet,ngus); % 
strsnmmisorbal5=zeros(sztet,ngus); % 
strsvsmisorbal6=zeros(sztet,ngus); % 
strsnmmisorbal6=zeros(sztet,ngus); % 



d3vomistrsdist=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-first step
d3nomistrsdist=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-first step
d3vomistrsdistbg=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-first step
d3nomistrsdistbg=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-first step
d3vomistrsdist1=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-second step
d3nomistrsdist1=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-second step
d3vomistrsdistbg1=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-second step
d3nomistrsdistbg1=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-second step
d3vomistrsdist2=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-third step
d3nomistrsdist2=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-third step
d3vomistrsdistbg2=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-third step
d3nomistrsdistbg2=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-third step
d3vomistrsdist3=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-fourth step
d3nomistrsdist3=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-fourth step
d3vomistrsdistbg3=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-fourth step
d3nomistrsdistbg3=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-fourth step
d3vomistrsdistl=zeros(sztet,szstrsd); % for 3d bar row is teta  and column is stress-first step
d3nomistrsdistl=zeros(sztet,szstrsd); % for 3d bar row is teta (basal misorientation with r.t loading)and column is stress-first step

d3vomistrsdist4=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-5 step
d3nomistrsdist4=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-5 step
d3vomistrsdistbg4=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-5 step
d3nomistrsdistbg4=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-5 step

d3vomistrsdist5=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-6 step
d3nomistrsdist5=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-6 step
d3vomistrsdistbg5=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-6 step
d3nomistrsdistbg5=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-6 step

d3vomistrsdist6=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-7 step
d3nomistrsdist6=zeros(sztet,szstrsd); % for 3d bar row is teta and column is stress-7 step
d3vomistrsdistbg6=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary) and column is stress-7 step
d3nomistrsdistbg6=zeros(sztet,szstrsd); % for 3d bar row is teta (basal noraml at the boundary)and column is stress-7 step



%%%%%%%%%%%%%%%%%% This section is for volume and diameter effects
volg=0:10000:1.40e+06;
szvol=max(size(volg));
szvol0=szvol-1;
dia=00:5:300;
szdia=max(size(dia));
szdia0=szdia-1;

diamgr=zeros(1,szdia);
volmgr=zeros(1,szvol);

strsvsdiam0=zeros(szdia,ngus); % stress (vonmises) vs diameter first step
strsnmdiam0=zeros(szdia,ngus); % stress (Principal) vs diamater first step
strsnmvolg0=zeros(szvol,ngus); % stress (Vonmises) vs volume first step
strsvsvolg0=zeros(szvol,ngus); % stress (Vonmises) vs Volume first step

strsvsdiam1=zeros(szdia,ngus); % stress (vonmises) vs diameter second step
strsnmdiam1=zeros(szdia,ngus); % stress (Principal) vs diamater second step
strsnmvolg1=zeros(szvol,ngus); % stress (Vonmises) vs volume second step
strsvsvolg1=zeros(szvol,ngus); % stress (Vonmises) vs Volume second step


strsvsdiam2=zeros(szdia,ngus); % stress (vonmises) vs diameter third step
strsnmdiam2=zeros(szdia,ngus); % stress (Principal) vs diamater third step
strsnmvolg2=zeros(szvol,ngus); % stress (Vonmises) vs volume third step
strsvsvolg2=zeros(szvol,ngus); % stress (Vonmises) vs Volume third step

strsvsdiam3=zeros(szdia,ngus); % stress (vonmises) vs diameter fourth step
strsnmdiam3=zeros(szdia,ngus); % stress (Principal) vs diamater fourth step
strsnmvolg3=zeros(szvol,ngus); % stress (Vonmises) vs volume fourth step
strsvsvolg3=zeros(szvol,ngus); % stress (Vonmises) vs Volume fourth step

strsvsdiam4=zeros(szdia,ngus); % stress (vonmises) vs diameter 5 step
strsnmdiam4=zeros(szdia,ngus); % stress (Principal) vs diamater 5 step
strsnmvolg4=zeros(szvol,ngus); % stress (Vonmises) vs volume 5 step
strsvsvolg4=zeros(szvol,ngus); % stress (Vonmises) vs Volume 5 step

strsvsdiam5=zeros(szdia,ngus); % stress (vonmises) vs diameter 6 step
strsnmdiam5=zeros(szdia,ngus); % stress (Principal) vs diamater 6 step
strsnmvolg5=zeros(szvol,ngus); % stress (Vonmises) vs volume 6 step
strsvsvolg5=zeros(szvol,ngus); % stress (Vonmises) vs Volume 6 step

strsvsdiam6=zeros(szdia,ngus); % stress (vonmises) vs diameter 7 step
strsnmdiam6=zeros(szdia,ngus); % stress (Principal) vs diamater 7 step
strsnmvolg6=zeros(szvol,ngus); % stress (Vonmises) vs volume 7 step
strsvsvolg6=zeros(szvol,ngus); % stress (Vonmises) vs Volume 7 step



%%%%%%%%%%%%%%%%%%

neighbtst0=zeros(ngus,70);
neighbtst1=zeros(ngus,70);
neighbtst2=zeros(ngus,70);
neighbtst3=zeros(ngus,70);
neighbtst4=zeros(ngus,70);
neighbtst5=zeros(ngus,70);
neighbtst6=zeros(ngus,70);


for i=1:sznmis
    grnid=neighmisor(i,1); %grain  id
    nonb=neighmisor(i,2); %number of neighbours
  
    grexp0=find(exp5n(:,1)==grnid); %first step
    grexp1=find(exp150n(:,1)==grnid); %second step
    grexp2=find(exp300n(:,1)==grnid); %3rd step
    grexp3=find(exp310n(:,1)==grnid); %4th step
    grexp4=find(exp315n(:,1)==grnid); %5th step
    grexp5=find(exp316n(:,1)==grnid); %6th step
    grexp6=find(exp325n(:,1)==grnid); %7th step
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if (isempty(grexp0) ==0) % for the first step
        scg(1,1)=exp5n(grexp0,idstrs+1);
        scg(2,2)=exp5n(grexp0,idstrs+2);
        scg(3,3)=exp5n(grexp0,idstrs+3);
                    
        scg(2,3)=exp5n(grexp0,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp5n(grexp0,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp5n(grexp0,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist(icntsv)=vomistrsdist(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist(icntsp)=nomistrsdist(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
                msiorbaldist(icntlb)=msiorbaldist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal0(icntlb,1)=strsvsmisorbal0(icntlb,1)+1;
                nloc=strsvsmisorbal0(icntlb,1);
                strsvsmisorbal0(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal0(icntlb,1)=strsnmmisorbal0(icntlb,1)+1;
                nloc=strsnmmisorbal0(icntlb,1);
                strsnmmisorbal0(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp5n(grexp0,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
                volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg0(icntvol,1)=strsvsvolg0(icntvol,1)+1;
                nloc=strsvsvolg0(icntvol,1);
                strsvsvolg0(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg0(icntvol,1)=strsnmvolg0(icntvol,1)+1;
                nloc=strsnmvolg0(icntvol,1);
                strsnmvolg0(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
                diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam0(icntdia,1)=strsvsdiam0(icntdia,1)+1;
                nloc=strsvsdiam0(icntdia,1);
                strsvsdiam0(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam0(icntdia,1)=strsnmdiam0(icntdia,1)+1;
                nloc=strsnmdiam0(icntdia,1);
                strsnmdiam0(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        
        
        
        %%%%%%%%%%%%%%%%%%
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd0(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd0(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd0(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd0(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd0(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd0(id0,3)=vonstrs;  %von mises stress
                
                
            if (neighbtst0(i,2+j)==0)
                
            %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%                i1=5*(icntm-1);
%                i2=20*(icntsv-1);
                d3vomistrsdist(icntm,icntsv)=d3vomistrsdist(icntm,icntsv)+1;
                d3nomistrsdist(icntm,icntsp)=d3nomistrsdist(icntm,icntsp)+1;     
                        
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        neighb_msiorbasdist(icntbg)=neighb_msiorbasdist(icntbg)+neighmisor(i,2);
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg(icntbg,icntsv)=d3vomistrsdistbg(icntbg,icntsv)+1;
                d3nomistrsdistbg(icntbg,icntsp)=d3nomistrsdistbg(icntbg,icntsp)+1; 
                %%%% end misorientation distribution
            

                neighbtst0(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst0(idfnb,idfnb2)=1; %not to be counted again
                end
            end
                  
        end 
        
    end % end of first step
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp1) ==0) % for the second step
        scg(1,1)=exp150n(grexp1,idstrs+1);
        scg(2,2)=exp150n(grexp1,idstrs+2);
        scg(3,3)=exp150n(grexp1,idstrs+3);
                    
        scg(2,3)=exp150n(grexp1,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp150n(grexp1,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp150n(grexp1,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist1(icntsv)=vomistrsdist1(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist1(icntsp)=nomistrsdist1(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal1(icntlb,1)=strsvsmisorbal1(icntlb,1)+1;
                nloc=strsvsmisorbal1(icntlb,1);
                strsvsmisorbal1(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal1(icntlb,1)=strsnmmisorbal1(icntlb,1)+1;
                nloc=strsnmmisorbal1(icntlb,1);
                strsnmmisorbal1(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp150n(grexp1,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg1(icntvol,1)=strsvsvolg1(icntvol,1)+1;
                nloc=strsvsvolg1(icntvol,1);
                strsvsvolg1(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg1(icntvol,1)=strsnmvolg1(icntvol,1)+1;
                nloc=strsnmvolg1(icntvol,1);
                strsnmvolg1(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam1(icntdia,1)=strsvsdiam1(icntdia,1)+1;
                nloc=strsvsdiam1(icntdia,1);
                strsvsdiam1(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam1(icntdia,1)=strsnmdiam1(icntdia,1)+1;
                nloc=strsnmdiam1(icntdia,1);
                strsnmdiam1(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd1(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd1(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd1(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd1(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd1(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd1(id0,3)=vonstrs;  %von mises stress
               
            if (neighbtst1(i,2+j)==0)
            %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                     msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%                i1=5*(icntm-1);
%                i2=20*(icntsv-1);
                d3vomistrsdist1(icntm,icntsv)=d3vomistrsdist1(icntm,icntsv)+1;
                d3nomistrsdist1(icntm,icntsp)=d3nomistrsdist1(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                     msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg1(icntbg,icntsv)=d3vomistrsdistbg1(icntbg,icntsv)+1;
                d3nomistrsdistbg1(icntbg,icntsp)=d3nomistrsdistbg1(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst1(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst1(idfnb,idfnb2)=1; %not to be counted again
                end   
            
            end
            
            
        end 
        
    end % end of second step

           
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp2) ==0) % for the third step
        scg(1,1)=exp300n(grexp2,idstrs+1);
        scg(2,2)=exp300n(grexp2,idstrs+2);
        scg(3,3)=exp300n(grexp2,idstrs+3);
                    
        scg(2,3)=exp300n(grexp2,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp300n(grexp2,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp300n(grexp2,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist2(icntsv)=vomistrsdist2(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist2(icntsp)=nomistrsdist2(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal2(icntlb,1)=strsvsmisorbal2(icntlb,1)+1;
                nloc=strsvsmisorbal2(icntlb,1);
                strsvsmisorbal2(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal2(icntlb,1)=strsnmmisorbal2(icntlb,1)+1;
                nloc=strsnmmisorbal2(icntlb,1);
                strsnmmisorbal2(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp300n(grexp2,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg2(icntvol,1)=strsvsvolg2(icntvol,1)+1;
                nloc=strsvsvolg2(icntvol,1);
                strsvsvolg2(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg2(icntvol,1)=strsnmvolg2(icntvol,1)+1;
                nloc=strsnmvolg2(icntvol,1);
                strsnmvolg2(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam2(icntdia,1)=strsvsdiam2(icntdia,1)+1;
                nloc=strsvsdiam2(icntdia,1);
                strsvsdiam2(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam2(icntdia,1)=strsnmdiam2(icntdia,1)+1;
                nloc=strsnmdiam2(icntdia,1);
                strsnmdiam2(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd2(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd2(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd2(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd2(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd2(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd2(id0,3)=vonstrs;  %von mises stress
                     
            if (neighbtst2(i,2+j)==0)
                
                %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%             i1=5*(icntm-1);
%             i2=20*(icntsv-1);
                d3vomistrsdist2(icntm,icntsv)=d3vomistrsdist2(icntm,icntsv)+1;
                d3nomistrsdist2(icntm,icntsp)=d3nomistrsdist2(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg2(icntbg,icntsv)=d3vomistrsdistbg2(icntbg,icntsv)+1;
                d3nomistrsdistbg2(icntbg,icntsp)=d3nomistrsdistbg2(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst2(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst2(idfnb,idfnb2)=1; %not to be counted again
                end
            end
            
        end 
        
    end % end of third step
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp3) ==0) % for the fourth step
        scg(1,1)=exp310n(grexp3,idstrs+1);
        scg(2,2)=exp310n(grexp3,idstrs+2);
        scg(3,3)=exp310n(grexp3,idstrs+3);
                    
        scg(2,3)=exp310n(grexp3,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp310n(grexp3,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp310n(grexp3,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist3(icntsv)=vomistrsdist3(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist3(icntsp)=nomistrsdist3(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal3(icntlb,1)=strsvsmisorbal3(icntlb,1)+1;
                nloc=strsvsmisorbal3(icntlb,1);
                strsvsmisorbal3(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal3(icntlb,1)=strsnmmisorbal3(icntlb,1)+1;
                nloc=strsnmmisorbal3(icntlb,1);
                strsnmmisorbal3(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp310n(grexp3,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg3(icntvol,1)=strsvsvolg3(icntvol,1)+1;
                nloc=strsvsvolg3(icntvol,1);
                strsvsvolg3(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg3(icntvol,1)=strsnmvolg3(icntvol,1)+1;
                nloc=strsnmvolg3(icntvol,1);
                strsnmvolg3(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam3(icntdia,1)=strsvsdiam3(icntdia,1)+1;
                nloc=strsvsdiam3(icntdia,1);
                strsvsdiam3(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam3(icntdia,1)=strsnmdiam3(icntdia,1)+1;
                nloc=strsnmdiam3(icntdia,1);
                strsnmdiam3(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd3(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd3(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd3(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd3(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd3(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd3(id0,3)=vonstrs;  %von mises stress
                     
            if (neighbtst3(i,2+j)==0)
                
                %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%             i1=5*(icntm-1);
%             i2=20*(icntsv-1);
                d3vomistrsdist3(icntm,icntsv)=d3vomistrsdist3(icntm,icntsv)+1;
                d3nomistrsdist3(icntm,icntsp)=d3nomistrsdist3(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg3(icntbg,icntsv)=d3vomistrsdistbg3(icntbg,icntsv)+1;
                d3nomistrsdistbg3(icntbg,icntsp)=d3nomistrsdistbg3(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst3(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst3(idfnb,idfnb2)=1; %not to be counted again
                end
            end
            
        end 
        
    end % end of fourth step
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp4) ==0) % for the 5th step
        scg(1,1)=exp315n(grexp4,idstrs+1);
        scg(2,2)=exp315n(grexp4,idstrs+2);
        scg(3,3)=exp315n(grexp4,idstrs+3);
                    
        scg(2,3)=exp315n(grexp4,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp315n(grexp4,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp315n(grexp4,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist4(icntsv)=vomistrsdist4(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist4(icntsp)=nomistrsdist4(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal4(icntlb,1)=strsvsmisorbal4(icntlb,1)+1;
                nloc=strsvsmisorbal4(icntlb,1);
                strsvsmisorbal4(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal4(icntlb,1)=strsnmmisorbal4(icntlb,1)+1;
                nloc=strsnmmisorbal4(icntlb,1);
                strsnmmisorbal4(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp315n(grexp4,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg4(icntvol,1)=strsvsvolg4(icntvol,1)+1;
                nloc=strsvsvolg4(icntvol,1);
                strsvsvolg4(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg4(icntvol,1)=strsnmvolg4(icntvol,1)+1;
                nloc=strsnmvolg4(icntvol,1);
                strsnmvolg4(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam4(icntdia,1)=strsvsdiam4(icntdia,1)+1;
                nloc=strsvsdiam4(icntdia,1);
                strsvsdiam4(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam4(icntdia,1)=strsnmdiam4(icntdia,1)+1;
                nloc=strsnmdiam4(icntdia,1);
                strsnmdiam4(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd4(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd4(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd4(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd4(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd4(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd4(id0,3)=vonstrs;  %von mises stress
                     
            if (neighbtst4(i,2+j)==0)
                
                %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%             i1=5*(icntm-1);
%             i2=20*(icntsv-1);
                d3vomistrsdist4(icntm,icntsv)=d3vomistrsdist4(icntm,icntsv)+1;
                d3nomistrsdist4(icntm,icntsp)=d3nomistrsdist4(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg4(icntbg,icntsv)=d3vomistrsdistbg4(icntbg,icntsv)+1;
                d3nomistrsdistbg4(icntbg,icntsp)=d3nomistrsdistbg4(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst4(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst4(idfnb,idfnb2)=1; %not to be counted again
                end
            end
            
        end 
        
    end % end of 5 step
    
     
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp5) ==0) % for the 6th step
        scg(1,1)=exp316n(grexp5,idstrs+1);
        scg(2,2)=exp316n(grexp5,idstrs+2);
        scg(3,3)=exp316n(grexp5,idstrs+3);
                    
        scg(2,3)=exp316n(grexp5,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp316n(grexp5,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp316n(grexp5,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist5(icntsv)=vomistrsdist5(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist5(icntsp)=nomistrsdist5(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal5(icntlb,1)=strsvsmisorbal5(icntlb,1)+1;
                nloc=strsvsmisorbal5(icntlb,1);
                strsvsmisorbal5(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal5(icntlb,1)=strsnmmisorbal5(icntlb,1)+1;
                nloc=strsnmmisorbal5(icntlb,1);
                strsnmmisorbal5(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp316n(grexp5,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg5(icntvol,1)=strsvsvolg5(icntvol,1)+1;
                nloc=strsvsvolg5(icntvol,1);
                strsvsvolg5(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg5(icntvol,1)=strsnmvolg5(icntvol,1)+1;
                nloc=strsnmvolg5(icntvol,1);
                strsnmvolg5(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam5(icntdia,1)=strsvsdiam5(icntdia,1)+1;
                nloc=strsvsdiam5(icntdia,1);
                strsvsdiam5(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam5(icntdia,1)=strsnmdiam5(icntdia,1)+1;
                nloc=strsnmdiam5(icntdia,1);
                strsnmdiam5(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd5(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd5(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd5(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd5(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd5(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd5(id0,3)=vonstrs;  %von mises stress
                     
            if (neighbtst5(i,2+j)==0)
                
                %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%             i1=5*(icntm-1);
%             i2=20*(icntsv-1);
                d3vomistrsdist5(icntm,icntsv)=d3vomistrsdist5(icntm,icntsv)+1;
                d3nomistrsdist5(icntm,icntsp)=d3nomistrsdist5(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg5(icntbg,icntsv)=d3vomistrsdistbg5(icntbg,icntsv)+1;
                d3nomistrsdistbg5(icntbg,icntsp)=d3nomistrsdistbg5(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst5(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst5(idfnb,idfnb2)=1; %not to be counted again
                end
            end
            
        end 
        
    end % end of 6 step
    
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
    if (isempty(grexp6) ==0) % for the 7th step
        scg(1,1)=exp325n(grexp6,idstrs+1);
        scg(2,2)=exp325n(grexp6,idstrs+2);
        scg(3,3)=exp325n(grexp6,idstrs+3);
                    
        scg(2,3)=exp325n(grexp6,idstrs+4);
        scg(3,2)=scg(2,3);
        scg(1,3)=exp325n(grexp6,idstrs+5);
        scg(3,1)=scg(1,3);
        scg(1,2)=exp325n(grexp6,idstrs+6);
        scg(2,1)=scg(1,2);
        
        strsnrm=norm(scg);
        vonstrs=vonmis(scg);
        
        ifndsv=0; % Von mises stresses distribution
        icntsv=1;
        while ((ifndsv == 0) & (icntsv <= szstrsd0))
                
            if ((vonstrs>strsd(icntsv)) & ... 
                (vonstrs<=strsd(icntsv+1)))
                vomistrsdist6(icntsv)=vomistrsdist6(icntsv)+1;
                ifndsv=1;
                
            end
            icntsv=icntsv+1;
        end       
        
        
        
        ifndsp=0; % Principal stresses distribution
        icntsp=1;
        while ((ifndsp == 0) & (icntsp <= szstrsd0))
                
            if ((strsnrm>strsd(icntsp)) & ... 
                (strsnrm<=strsd(icntsp+1)))
                nomistrsdist6(icntsp)=nomistrsdist6(icntsp)+1;
                ifndsp=1;
                
            end
            icntsp=icntsp+1;
        end       
        
        %%%%%%%% w.r.t loading direction
        ifndbl=0; % Basal misorientation w.r.t. loading direction
        icntlb=1;
        while ((ifndbl == 0) & (icntlb <= sztet0))
                
            if ((loadmisor(i,5)>tet(icntlb)) & ... 
                (loadmisor(i,5)<=tet(icntlb+1)))
%                 msiorbaldist(icntlb)=nomistrsdist(icntlb)+1;
                ifndbl=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsmisorbal6(icntlb,1)=strsvsmisorbal6(icntlb,1)+1;
                nloc=strsvsmisorbal6(icntlb,1);
                strsvsmisorbal6(icntlb,nloc+1)=vonstrs;
                
                strsnmmisorbal6(icntlb,1)=strsnmmisorbal6(icntlb,1)+1;
                nloc=strsnmmisorbal6(icntlb,1);
                strsnmmisorbal6(icntlb,nloc+1)=strsnrm;
                                               
            end
            icntlb=icntlb+1;
        end  
        %%%%%%%%%%%%%%%%%%
        
        %%%%%%%% Size effect
        ifndvol=0; % 
        icntvol=1;
        volc=exp325n(grexp6,3);
        while ((ifndvol == 0) & (icntvol <= szvol0))
                
            if ((volc>volg(icntvol)) & ... 
                (volc<=volg(icntvol+1)))
%                 volmgr(icntvol)=volmgr(icntvol)+1;
                ifndvol=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsvolg6(icntvol,1)=strsvsvolg6(icntvol,1)+1;
                nloc=strsvsvolg6(icntvol,1);
                strsvsvolg6(icntvol,nloc+1)=vonstrs;
                
                strsnmvolg6(icntvol,1)=strsnmvolg6(icntvol,1)+1;
                nloc=strsnmvolg6(icntvol,1);
                strsnmvolg6(icntvol,nloc+1)=strsnrm;
                                               
            end
            icntvol=icntvol+1;
        end  
        
        
        ifndiam=0; % 
        icntdia=1;
        diag=(6*volc/pi)^(1/3);
        while ((ifndiam == 0) & (icntdia <= szdia0))
                
            if ((diag>dia(icntdia)) & ... 
                (diag<=dia(icntdia+1)))
%                 diamgr(icntdia)=diamgr(icntdia)+1;
                ifndiam=1;
                
                %%%This is for stress distribution as a function of the
                %%%misorientation w.r.t the applied load
                strsvsdiam6(icntdia,1)=strsvsdiam6(icntdia,1)+1;
                nloc=strsvsdiam6(icntdia,1);
                strsvsdiam6(icntdia,nloc+1)=vonstrs;
                
                strsnmdiam6(icntdia,1)=strsnmdiam6(icntdia,1)+1;
                nloc=strsnmdiam6(icntdia,1);
                strsnmdiam6(icntdia,nloc+1)=strsnrm;
                                               
            end
            icntdia=icntdia+1;
        end  
              
        %%%%%%%%%%%%%%%%%%
        
        
        for j=1:nonb
            id0=id0+1;
            strsvsmisorbnd6(id0,1)=neighmisor(i,2+j+nonb); %total misorientation
            strsvsmisorbnd6(id0,2)=strsnrm; %principal stress
            strsvsmisorbnd6(id0,3)=vonstrs; %von mises stress
            
            strsvsbmisorbnd6(id0,1)=neighmisor(i,2+j+2*nonb); %total misorientation
            strsvsbmisorbnd6(id0,2)=strsnrm;       %principal stress     
            strsvsbmisorbnd6(id0,3)=vonstrs;  %von mises stress
                     
            if (neighbtst6(i,2+j)==0)
                
                %%%%%misorientation distribution
                ifndtm=0; % teta is not found yet-total misor
                icntm=1;
                while ((ifndtm == 0) & (icntm <= sztet0))
                
                    if ((neighmisor(i,2+j+nonb)>tet(icntm)) & ... %total misorinetation
                        (neighmisor(i,2+j+nonb)<=tet(icntm+1)))
%                        msiorgrndist(icntm)=msiorgrndist(icntm)+1;
                        ifndtm=1;
                
                    end
                    icntm=icntm+1;
                end
%             i1=5*(icntm-1);
%             i2=20*(icntsv-1);
                d3vomistrsdist6(icntm,icntsv)=d3vomistrsdist6(icntm,icntsv)+1;
                d3nomistrsdist6(icntm,icntsp)=d3nomistrsdist6(icntm,icntsp)+1;     
            
            
            
                ifndbg=0; % teta (basal normal at the boundary) is not found yet- basal misor
                icntbg=1;
                while ((ifndbg == 0) & (icntbg <= sztet0))
                
                    if ((neighmisor(i,2+j+2*nonb)>tet(icntbg)) & ... %total misorinetation
                        (neighmisor(i,2+j+2*nonb)<=tet(icntbg+1)))
%                        msiorbasdist(icntbg)=msiorbasdist(icntbg)+1;
                        ifndbg=1;
                
                    end
                    icntbg=icntbg+1;
                end
                d3vomistrsdistbg6(icntbg,icntsv)=d3vomistrsdistbg6(icntbg,icntsv)+1;
                d3nomistrsdistbg6(icntbg,icntsp)=d3nomistrsdistbg6(icntbg,icntsp)+1; 
            %%%% end misorientation distribution
            
                neighbtst6(i,j+2)=1; %not to be counted again
                grngb=neighmisor(i,2+j);
                idfnb=find(neighmisor(:,1)==grngb);
                if (isempty(idfnb)==0)
                    idfnb2=find(neighmisor(idfnb,:)==grnid);
                    neighbtst6(idfnb,idfnb2)=1; %not to be counted again
                end
            end
            
        end 
        
    end % end of 7 step
    
end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%Plot results for the first step
%%%%%%%%%%%%%%%%%%%%%%%%%%


fig17 = figure(17);
axes17 = axes('Parent',fig17,'FontSize',12);
plot(strsvsmisorbnd0(:,1),strsvsmisorbnd0(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 0: 5N','fontsize',14 ) 


fig18 = figure(18);
axes18 = axes('Parent',fig18,'FontSize',12);
plot(strsvsmisorbnd0(:,1),strsvsmisorbnd0(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 0: 5N','fontsize',14 ) 



fig19 = figure(19);
axes19 = axes('Parent',fig19,'FontSize',12);
bar(tet,msiorgrndist/sum(msiorgrndist))
xlabel('Total misorientation at the grain boundary','fontsize',14)
ylabel('Frequency ','fontsize',14)

grid on
%title ('Step 0','fontsize',14 ) 
axh = gca;
set(axh,'XTick',[0:15:80]);
set(axh,'YTick',[0:0.03:0.18]);
axis([-2.5 92 0 0.18])



fig21 = figure(21);
axes21 = axes('Parent',fig21,'FontSize',12);
bar(strsd,vomistrsdist/sum(vomistrsdist))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 400 0 0.5])
grid on
title ('Step 0: 5N','fontsize',14 ) 



d3vomistrsdist0=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist0=d3vomistrsdist(:,1:18);
fig22 = figure(22);
axes22 = axes('Parent',fig22,'FontSize',12);
bar3(d3vomistrsdist0/sum(sum(d3vomistrsdist0)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 0: 5N','fontsize',14 ) 


fig23 = figure(23);
axes23 = axes('Parent',fig23,'FontSize',12);
bar(strsd,nomistrsdist/sum(nomistrsdist))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 400 0 0.5])
grid on
title ('Step 0: 5N','fontsize',14 ) 



d3nomistrsdist0=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist0=d3nomistrsdist(:,1:18);
fig24 = figure(24);
axes24 = axes('Parent',fig24,'FontSize',12);
bar3(d3nomistrsdist0/sum(sum(d3nomistrsdist0)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 0: 5N','fontsize',14 ) 


            
fig25 = figure(25);
axes25 = axes('Parent',fig25,'FontSize',12);
bar(tet,msiorbasdist/sum(msiorbasdist))
xlabel('Basal plane misorientation at the grain boundary','fontsize',14)
ylabel('Frequency ','fontsize',14)
axis([-2.5 92 0 0.15])
grid on
%title ('Step 0','fontsize',14 )             
     
axh = gca;
set(axh,'XTick',[0:15:80]);
set(axh,'YTick',[0:0.025:0.15]);




fig26 = figure(26);
axes26 = axes('Parent',fig26,'FontSize',12);
plot(strsvsbmisorbnd0(:,1),strsvsbmisorbnd0(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 0: 5N','fontsize',14 ) 


fig27 = figure(27);
axes27 = axes('Parent',fig27,'FontSize',12);
plot(strsvsbmisorbnd0(:,1),strsvsbmisorbnd0(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 0: 5N','fontsize',14)


d3vomistrsdistbg0=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg0=d3vomistrsdistbg(:,1:18);
fig28 = figure(28);
axes28 = axes('Parent',fig28,'FontSize',12);
bar3(d3vomistrsdistbg0/sum(sum(d3vomistrsdistbg0)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 0: 5N- basal normal at the grain boundary','fontsize',14 ) 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%Second-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig29 = figure(29);
axes29 = axes('Parent',fig29,'FontSize',12);
plot(strsvsmisorbnd1(:,1),strsvsmisorbnd1(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 1: 150N','fontsize',14 ) 


fig30 = figure(30);
axes30 = axes('Parent',fig30,'FontSize',12);
plot(strsvsmisorbnd1(:,1),strsvsmisorbnd1(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 1: 150N','fontsize',14 ) 



fig31 = figure(31);
axes31 = axes('Parent',fig31,'FontSize',12);
bar(strsd,vomistrsdist1/sum(vomistrsdist1))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 400 0 0.35])
grid on
title ('Step 1 : 150N','fontsize',14 ) 



d3vomistrsdist01=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist01=d3vomistrsdist1(:,1:18);
fig32 = figure(32);
axes32 = axes('Parent',fig32,'FontSize',12);
bar3(d3vomistrsdist01/sum(sum(d3vomistrsdist01)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 1- total misorientation at boundary','fontsize',14 ) 


fig33 = figure(33);
axes33 = axes('Parent',fig33,'FontSize',12);
bar(strsd,nomistrsdist1/sum(nomistrsdist1))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 400 0 0.35])
grid on
title ('Step 1: 150N','fontsize',14 ) 



d3nomistrsdist01=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist01=d3nomistrsdist1(:,1:18);
fig34 = figure(34);
axes34 = axes('Parent',fig34,'FontSize',12);
bar3(d3nomistrsdist01/sum(sum(d3nomistrsdist01)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 1: 150N- total misorientation at boundary','fontsize',14 ) 


            
            
fig36 = figure(36);
axes36 = axes('Parent',fig36,'FontSize',12);
plot(strsvsbmisorbnd1(:,1),strsvsbmisorbnd1(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 1: 150N','fontsize',14 ) 


fig37 = figure(37);
axes37 = axes('Parent',fig37,'FontSize',12);
plot(strsvsbmisorbnd1(:,1),strsvsbmisorbnd1(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 1: 150N','fontsize',14)


d3vomistrsdistbg01=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg01=d3vomistrsdistbg1(:,1:end);
fig38 = figure(38);
axes38 = axes('Parent',fig38,'FontSize',12);
bar3(d3vomistrsdistbg01/sum(sum(d3vomistrsdistbg01)))
xlabel('Von Mises Stress (MPa)/20 ','fontsize',14)
ylabel('\theta/ 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step-2 ','fontsize',14 ) 
% 
% 
% 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%Third-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig39 = figure(39);
axes39 = axes('Parent',fig39,'FontSize',12);
plot(strsvsmisorbnd2(:,1),strsvsmisorbnd2(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 2: 300N','fontsize',14 ) 


fig40 = figure(40);
axes40 = axes('Parent',fig40,'FontSize',12);
plot(strsvsmisorbnd2(:,1),strsvsmisorbnd2(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 2: 300N','fontsize',14 ) 



fig41 = figure(41);
axes41 = axes('Parent',fig41,'FontSize',12);
bar(strsd,vomistrsdist2/sum(vomistrsdist2))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 400 0 0.35])
grid on
title ('Step 2: 300N','fontsize',14 ) 



d3vomistrsdist02=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist02=d3vomistrsdist2(:,1:18);
fig42 = figure(42);
axes42 = axes('Parent',fig42,'FontSize',12);
bar3(d3vomistrsdist02/sum(sum(d3vomistrsdist02)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 2: 300N- total misorientation at boundary','fontsize',14 ) 


fig43 = figure(43);
axes43 = axes('Parent',fig43,'FontSize',12);
bar(strsd,nomistrsdist2/sum(nomistrsdist2))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 650 0 0.35])
grid on
title ('Step 2: 300N','fontsize',14 ) 



d3nomistrsdist02=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist02=d3nomistrsdist2(:,1:18);
fig44 = figure(44);
axes44 = axes('Parent',fig44,'FontSize',12);
bar3(d3nomistrsdist02/sum(sum(d3nomistrsdist02)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 2: 300N- total misorientation at boundary','fontsize',14 ) 

            
            
fig46 = figure(46);
axes46 = axes('Parent',fig46,'FontSize',12);
plot(strsvsbmisorbnd2(:,1),strsvsbmisorbnd2(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
grid on
title ('Step 2: 300N','fontsize',14 ) 



fig47 = figure(47);
axes47 = axes('Parent',fig47,'FontSize',12);
plot(strsvsbmisorbnd2(:,1),strsvsbmisorbnd2(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
title ('Step 2: 300N','fontsize',14)



d3vomistrsdistbg02=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg02=d3vomistrsdistbg2(:,1:18);
fig48 = figure(48);
axes48 = axes('Parent',fig48,'FontSize',12);
bar3(d3vomistrsdistbg02/sum(sum(d3vomistrsdistbg02)))
xlabel('Von Mises Stress (MPa)/20','fontsize',14)
ylabel('\theta/ 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3','fontsize',14 ) 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%fourth-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig49 = figure(49);
axes49 = axes('Parent',fig49,'FontSize',12);
plot(strsvsmisorbnd3(:,1),strsvsmisorbnd3(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 3: 310N','fontsize',14 ) 


fig50 = figure(50);
axes50 = axes('Parent',fig50,'FontSize',12);
plot(strsvsmisorbnd3(:,1),strsvsmisorbnd3(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 3: 310N','fontsize',14 ) 



fig51 = figure(51);
axes51 = axes('Parent',fig51,'FontSize',12);
bar(strsd,vomistrsdist3/sum(vomistrsdist3))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 600 0 0.25])
grid on
title ('Step 3: 310N','fontsize',14 ) 



d3vomistrsdist03=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist03=d3vomistrsdist3(:,1:18);
fig52 = figure(52);
axes52 = axes('Parent',fig52,'FontSize',12);
bar3(d3vomistrsdist03/sum(sum(d3vomistrsdist03)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 310N- total misorientation at boundary','fontsize',14 ) 


fig53 = figure(53);
axes53 = axes('Parent',fig53,'FontSize',12);
bar(strsd,nomistrsdist3/sum(nomistrsdist3))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
 axis([-10 650 0 0.25])
grid on
title ('Step 3: 310N','fontsize',14 ) 



d3nomistrsdist03=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist03=d3nomistrsdist3(:,1:18);
fig54 = figure(54);
axes54 = axes('Parent',fig54,'FontSize',12);
bar3(d3nomistrsdist03/sum(sum(d3nomistrsdist03)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 310N- total misorientation at boundary','fontsize',14 ) 

            
            
fig56 = figure(56);
axes56 = axes('Parent',fig56,'FontSize',12);
plot(strsvsbmisorbnd3(:,1),strsvsbmisorbnd3(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
grid on
title ('Step 3: 310N','fontsize',14 ) 



fig57 = figure(57);
axes57 = axes('Parent',fig57,'FontSize',12);
plot(strsvsbmisorbnd3(:,1),strsvsbmisorbnd3(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
title ('Step 3: 310N','fontsize',14)



d3vomistrsdistbg03=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg03=d3vomistrsdistbg3(:,1:18);
fig58 = figure(58);
axes58 = axes('Parent',fig58,'FontSize',12);
bar3(d3vomistrsdistbg03/sum(sum(d3vomistrsdistbg03)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 310N- basal normal at the grain boundary','fontsize',14 ) 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%5th-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig549 = figure(549);
axes549 = axes('Parent',fig549,'FontSize',12);
plot(strsvsmisorbnd4(:,1),strsvsmisorbnd4(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 3: 315N','fontsize',14 ) 


fig550 = figure(550);
axes550 = axes('Parent',fig550,'FontSize',12);
plot(strsvsmisorbnd4(:,1),strsvsmisorbnd4(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 3: 315N','fontsize',14 ) 



fig551 = figure(551);
axes551 = axes('Parent',fig551,'FontSize',12);
bar(strsd,vomistrsdist4/sum(vomistrsdist4))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([-10 600 0 0.25])
grid on
title ('Step 3: 315N','fontsize',14 ) 



d3vomistrsdist04=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist04=d3vomistrsdist4(:,1:end);
fig552 = figure(552);
axes552 = axes('Parent',fig552,'FontSize',12);
bar3(d3vomistrsdist04/sum(sum(d3vomistrsdist04)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 315N- total misorientation at boundary','fontsize',14 ) 


fig553 = figure(553);
axes553 = axes('Parent',fig553,'FontSize',12);
bar(strsd,nomistrsdist4/sum(nomistrsdist4))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([0 800 0 0.25])
grid on
title ('Step 3: 315N','fontsize',14 ) 



d3nomistrsdist04=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist04=d3nomistrsdist4(:,1:end);
fig554 = figure(554);
axes554 = axes('Parent',fig554,'FontSize',12);
bar3(d3nomistrsdist04/sum(sum(d3nomistrsdist04)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 315N- total misorientation at boundary','fontsize',14 ) 

            
            
fig556 = figure(556);
axes556 = axes('Parent',fig556,'FontSize',12);
plot(strsvsbmisorbnd4(:,1),strsvsbmisorbnd4(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
grid on
title ('Step 4: 315N','fontsize',14 ) 



fig557 = figure(557);
axes557 = axes('Parent',fig557,'FontSize',12);
plot(strsvsbmisorbnd4(:,1),strsvsbmisorbnd4(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
title ('Step 4: 315N','fontsize',14)



d3vomistrsdistbg04=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg04=d3vomistrsdistbg4(:,1:end);
fig558 = figure(558);
axes558 = axes('Parent',fig558,'FontSize',12);
bar3(d3vomistrsdistbg04/sum(sum(d3vomistrsdistbg04)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 315N- basal normal at the grain boundary','fontsize',14 ) 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%6th-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig649 = figure(649);
axes649 = axes('Parent',fig649,'FontSize',12);
plot(strsvsmisorbnd5(:,1),strsvsmisorbnd5(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 5: 316N','fontsize',14 ) 


fig650 = figure(650);
axes650 = axes('Parent',fig650,'FontSize',12);
plot(strsvsmisorbnd5(:,1),strsvsmisorbnd5(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 5: 316N','fontsize',14 ) 



fig651 = figure(651);
axes651 = axes('Parent',fig651,'FontSize',12);
bar(strsd,vomistrsdist5/sum(vomistrsdist5))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([-10 600 0 0.25])
grid on
title ('Step 5: 316N','fontsize',14 ) 



d3vomistrsdist05=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist05=d3vomistrsdist5(:,1:end);
fig652 = figure(652);
axes652 = axes('Parent',fig652,'FontSize',12);
bar3(d3vomistrsdist05/sum(sum(d3vomistrsdist05)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 5: 315N- total misorientation at boundary','fontsize',14 ) 


fig653 = figure(653);
axes653 = axes('Parent',fig653,'FontSize',12);
bar(strsd,nomistrsdist5/sum(nomistrsdist5))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([0 800 0 0.25])
grid on
title ('Step 5: 316N','fontsize',14 ) 



d3nomistrsdist05=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist05=d3nomistrsdist5(:,1:end);
fig654 = figure(654);
axes654 = axes('Parent',fig654,'FontSize',12);
bar3(d3nomistrsdist05/sum(sum(d3nomistrsdist05)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 316N- total misorientation at boundary','fontsize',14 ) 

            
            
fig656 = figure(656);
axes656 = axes('Parent',fig656,'FontSize',12);
plot(strsvsbmisorbnd5(:,1),strsvsbmisorbnd5(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
grid on
title ('Step 5: 316N','fontsize',14 ) 



fig657 = figure(657);
axes657 = axes('Parent',fig657,'FontSize',12);
plot(strsvsbmisorbnd5(:,1),strsvsbmisorbnd5(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
title ('Step 5: 316N','fontsize',14)



d3vomistrsdistbg05=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg05=d3vomistrsdistbg5(:,1:end);
fig658 = figure(658);
axes658 = axes('Parent',fig658,'FontSize',12);
bar3(d3vomistrsdistbg05/sum(sum(d3vomistrsdistbg05)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 5: 316N- basal normal at the grain boundary','fontsize',14 ) 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%7th-step
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fig749 = figure(749);
axes749 = axes('Parent',fig749,'FontSize',12);
plot(strsvsmisorbnd6(:,1),strsvsmisorbnd6(:,2), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)

grid on
title ('Step 6: 325N','fontsize',14 ) 


fig750 = figure(750);
axes750 = axes('Parent',fig750,'FontSize',12);
plot(strsvsmisorbnd6(:,1),strsvsmisorbnd6(:,3), 'o','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)

grid on
title ('Step 5: 325N','fontsize',14 ) 



fig751 = figure(751);
axes751 = axes('Parent',fig751,'FontSize',12);
bar(strsd,vomistrsdist6/sum(vomistrsdist6))
xlabel('Von Mises stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([-10 600 0 0.25])
grid on
title ('Step 5: 325N','fontsize',14 ) 



d3vomistrsdist06=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdist06=d3vomistrsdist5(:,1:end);
fig752 = figure(752);
axes752 = axes('Parent',fig752,'FontSize',12);
bar3(d3vomistrsdist06/sum(sum(d3vomistrsdist06)))
xlabel('VonMises Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 6: 325N- total misorientation at boundary','fontsize',14 ) 


fig753 = figure(753);
axes753 = axes('Parent',fig753,'FontSize',12);
bar(strsd,nomistrsdist6/sum(nomistrsdist6))
xlabel('Principal stress (MPa)','fontsize',14)
ylabel('Frequency ','fontsize',14)
%  axis([0 800 0 0.25])
grid on
title ('Step 6: 325N','fontsize',14 ) 



d3nomistrsdist06=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3nomistrsdist06=d3nomistrsdist6(:,1:end);
fig754 = figure(754);
axes754 = axes('Parent',fig754,'FontSize',12);
bar3(d3nomistrsdist06/sum(sum(d3nomistrsdist06)))
xlabel('Principal Stress* 20 (MPa)','fontsize',14)
ylabel('teta * 5^{o} ','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step 3: 325N- total misorientation at boundary','fontsize',14 ) 

            
            
fig756 = figure(756);
axes756 = axes('Parent',fig756,'FontSize',12);
plot(strsvsbmisorbnd6(:,1),strsvsbmisorbnd6(:,3), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
grid on
title ('Step 6: 325N','fontsize',14 ) 



fig757 = figure(757);
axes757 = axes('Parent',fig757,'FontSize',12);
plot(strsvsbmisorbnd6(:,1),strsvsbmisorbnd6(:,2), 'o','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
title ('Step 6: 325N','fontsize',14)



d3vomistrsdistbg06=zeros(sztet,18); % for 3d bar row is teta and column is stress
d3vomistrsdistbg06=d3vomistrsdistbg6(:,1:end);
fig758 = figure(758);
axes758 = axes('Parent',fig758,'FontSize',12);
bar3(d3vomistrsdistbg06/sum(sum(d3vomistrsdistbg06)))
xlabel('Von Mises Stress (MPa)/20','fontsize',14)
ylabel('\theta/ 5^{o}','fontsize',14)
zlabel('Frequency','fontsize',14)
% axis([0 10 0 20 0 0.02]) 
grid on
%title ('Step 0','fontsize',14 ) 
view(-12,18)
title ('Step-7','fontsize',14 ) 




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%%%%%Merging history outputs into individual unique figures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fig59 = figure(59); %combination of Figs 49,39,29 and 17
axes59 = axes('Parent',fig59,'FontSize',12);
plot(strsvsmisorbnd0(:,1),strsvsmisorbnd0(:,2), 'k^',...
     strsvsmisorbnd1(:,1),strsvsmisorbnd1(:,2), 'rh',....
     strsvsmisorbnd2(:,1),strsvsmisorbnd2(:,2), 'gs',...
     strsvsmisorbnd3(:,1),strsvsmisorbnd3(:,2), 'bo','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
grid on
legend ('Step-0','Step-1','Step-2','Step-3')
% title ('Step-0','fontsize',14 ) 


fig60 = figure(60);  %combination of Figs 50,40,30 and 18
axes60 = axes('Parent',fig60,'FontSize',12);
plot(strsvsmisorbnd0(:,1),strsvsmisorbnd0(:,3), 'k^',...
     strsvsmisorbnd1(:,1),strsvsmisorbnd1(:,3), 'rh',....
     strsvsmisorbnd2(:,1),strsvsmisorbnd2(:,3), 'gs',...
     strsvsmisorbnd3(:,1),strsvsmisorbnd3(:,3), 'bo','LineWidth',2)
xlabel('Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
legend ('Step-0','Step-1','Step-2','Step-3')
grid on
% title ('Step 3','fontsize',14 ) 


% 
% vomistrsdist4(:,1)=vomistrsdist/sum(vomistrsdist);
% vomistrsdist4(:,2)=vomistrsdist1/sum(vomistrsdist1);
% vomistrsdist4(:,3)=vomistrsdist2/sum(vomistrsdist2);
% vomistrsdist4(:,4)=vomistrsdist3/sum(vomistrsdist3);
% fig61 = figure(61); %combination of Figs 51,41,31 and 21
% axes61 = axes('Parent',fig61,'FontSize',12);
% bar(strsd,vomistrsdist4)
% xlabel('Von Mises stress (MPa)','fontsize',14)
% ylabel('Frequency ','fontsize',14)
% axis([-10 600 0 0.5])
% legend ('Step-0','Step-1','Step-2','Step-3')
% grid on
% % title ('Step 3','fontsize',14 ) 
% 
% 
% 
% nomistrsdist4(:,1)=nomistrsdist/sum(nomistrsdist);
% nomistrsdist4(:,2)=nomistrsdist1/sum(nomistrsdist1);
% nomistrsdist4(:,3)=nomistrsdist2/sum(nomistrsdist2);
% nomistrsdist4(:,4)=nomistrsdist3/sum(nomistrsdist3);
% fig63 = figure(63);
% axes63 = axes('Parent',fig63,'FontSize',12);
% bar(strsd,nomistrsdist4)
% xlabel('Principal stress (MPa)','fontsize',14)
% ylabel('Frequency ','fontsize',14)
%  axis([-10 650 0 0.4])
%  legend ('Step-0','Step-1','Step-2','Step-3')
% grid on
% % title ('Step 3','fontsize',14 ) 




fig66 = figure(66); %combination of Figs 56,46,36 and 26
axes66 = axes('Parent',fig66,'FontSize',12);
plot(strsvsbmisorbnd0(:,1),strsvsbmisorbnd0(:,3), 'k^',...
     strsvsbmisorbnd1(:,1),strsvsbmisorbnd1(:,3), 'rh',...
     strsvsbmisorbnd2(:,1),strsvsbmisorbnd2(:,3), 'gs',...
     strsvsbmisorbnd3(:,1),strsvsbmisorbnd3(:,3), 'bo','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
legend ('Step-0','Step-1','Step-2','Step-3')
grid on
% title ('Step 3','fontsize',14 ) 


fig67 = figure(67); %combination of Figs 57,47,37 and 27
axes67 = axes('Parent',fig67,'FontSize',12);
plot(strsvsbmisorbnd0(:,1),strsvsbmisorbnd0(:,2), 'k^',...
     strsvsbmisorbnd1(:,1),strsvsbmisorbnd1(:,2), 'rh',...
     strsvsbmisorbnd2(:,1),strsvsbmisorbnd2(:,2), 'gs',...
     strsvsbmisorbnd3(:,1),strsvsbmisorbnd3(:,2), 'bo','LineWidth',2)
xlabel('Basal normal Misorientation at the grain boundary','fontsize',14)
ylabel('Maxmimum Principal Stress (MPa)','fontsize',14)
legend ('Step-0','Step-1','Step-2','Step-3')
grid on
% title ('Step 3','fontsize',14)

%%%% to plot w.r.t  the applied load- First Step



fig70 = figure(70);
axes70 = axes('Parent',fig70,'FontSize',12);
bar(tet,msiorbaldist/sum(msiorbaldist))
xlabel('\alpha^{o}','fontsize',14)
ylabel('Frequency ','fontsize',14)
axis([-2.5 92 0 0.4])
grid on
% title ('Step 0','fontsize',14 ) 
axh = gca;
set(axh,'XTick',[0:15:80]);
set(axh,'YTick',[0:0.05:0.4]);

% : Misorientation between basal plane normal and loading direction

avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig71 = figure(71);
axes71 = axes('Parent',fig71,'FontSize',12);
for i =1:sztet
    ncol=strsvsmisorbal0(i,1);
    avsvn(i)=sum(strsvsmisorbal0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsmisorbal0(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsvsmisorbal0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([-2.5 92 0 500])
grid on
title ('Step 0','fontsize',14 )  



avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig72 = figure(72);
axes72 = axes('Parent',fig72,'FontSize',12);
for i =1:sztet
    ncol=strsnmmisorbal0(i,1);
    avsvn(i)=sum(strsnmmisorbal0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmmisorbal0(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsnmmisorbal0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([-2.5 92 0 500])
grid on
title ('Step 0','fontsize',14 )  


%%second Step

avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);



fig73 = figure(73);
axes73 = axes('Parent',fig73,'FontSize',12);
for i =1:sztet
    ncol=strsvsmisorbal1(i,1);
    avsvn(i)=sum(strsvsmisorbal1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsmisorbal1(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsvsmisorbal1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
%plot(tet,maxvn,'g--','LineWidth',1.5)
%hold on
xlabel('\alpha^{o}','fontsize',14)
ylabel('Von Mises Stress (MPa)','fontsize',14)
axis([-2.5 92 0 600])
grid on
title ('Step-2','fontsize',14 )  
axh = gca;
set(axh,'XTick',[0:15:80]);
set(axh,'YTick',[0:100:600]);


avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig74 = figure(74);
axes74 = axes('Parent',fig74,'FontSize',12);
for i =1:sztet
    ncol=strsnmmisorbal1(i,1);
    avsvn(i)=sum(strsnmmisorbal1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmmisorbal1(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsnmmisorbal1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([-2.5 92 0 600])
grid on
title ('Step 1','fontsize',14 )  


%%Third Step

avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig75 = figure(75);
axes75 = axes('Parent',fig75,'FontSize',12);
for i =1:sztet
    ncol=strsvsmisorbal2(i,1);
    avsvn(i)=sum(strsvsmisorbal2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsmisorbal2(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsvsmisorbal2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([-2.5 92 0 800])
grid on
title ('Step 2','fontsize',14 )  



avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig76 = figure(76);
axes76 = axes('Parent',fig76,'FontSize',12);
for i =1:sztet
    ncol=strsnmmisorbal2(i,1);
    avsvn(i)=sum(strsnmmisorbal2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmmisorbal2(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsnmmisorbal2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([-2.5 92 0 850])
grid on
title ('Step 2','fontsize',14 )  




%%Fourth Step

avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig77 = figure(77);
axes77 = axes('Parent',fig77,'FontSize',12);
for i =1:sztet
    ncol=strsvsmisorbal3(i,1);
    avsvn(i)=sum(strsvsmisorbal3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsmisorbal3(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsvsmisorbal3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([-2.5 92 0 900])
grid on
title ('Step 3','fontsize',14 )  



avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig78 = figure(78);
axes78 = axes('Parent',fig78,'FontSize',12);
for i =1:sztet
    ncol=strsnmmisorbal3(i,1);
    avsvn(i)=sum(strsnmmisorbal3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmmisorbal3(i,2:ncol+1));
    end
    plot(repmat(tet(i),1,ncol), strsnmmisorbal3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
plot(tet,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Misorientation between basal plane normal and loading direction','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([-2.5 92 0 800])
grid on
title ('Step 3','fontsize',14 )  





%%sixth Step




 avsvn=zeros(1,sztet);
maxvn=zeros(1,sztet);

fig177 = figure(177);
axes177 = axes('Parent',fig177,'FontSize',12);
for i =1:sztet
    ncol=strsvsmisorbal6(i,1);
    avsvn(i)=sum(strsvsmisorbal6(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsmisorbal6(i,2:ncol+1));
    end
    dummy=zeros(1,ncol);
    idum=0;
    for jj=1:ncol
        if (tet(i) == 0)
            if (strsvsmisorbal6(i,jj+1)<800)
                idum=idum+1;
                dummy(idum)=strsvsmisorbal6(i,jj+1);
            end 
        elseif (tet(i)==30)
            if (strsvsmisorbal6(i,jj+1)<650)
                idum=idum+1;
                dummy(idum)=strsvsmisorbal6(i,jj+1);
            end 
        elseif (tet(i)==55)
            if (strsvsmisorbal6(i,jj+1)<500)
                idum=idum+1;
                dummy(idum)=strsvsmisorbal6(i,jj+1);
            end 
        else
           if (strsvsmisorbal6(i,jj+1)<650)
                idum=idum+1;
                dummy(idum)=strsvsmisorbal6(i,jj+1);
            end  
        end
        
                
        
        
    end 
    plot(repmat(tet(i),1,idum), dummy(1:idum),'bo','LineWidth',1.5)
    hold on
 
end
plot(tet,avsvn,'r-o','LineWidth',1.5)
hold on
%plot(tet,maxvn,'g--','LineWidth',1.5)
%hold on
xlabel('\alpha^{o}','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([-2.5 92 0 900])
grid on
title ('Step-7','fontsize',14 ) 
axh = gca;
set(axh,'XTick',[0:15:80]);
set(axh,'YTick',[0:100:900]);




%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%size effects-first step
%%%%%%%%%%%%%%%size effects-first step

fig80 = figure(80);
axes80 = axes('Parent',fig80,'FontSize',12);
bar(dia,diamgr/sum(diamgr))
xlabel(' Grain diameter (\mum)','fontsize',14)
ylabel('Frequency ','fontsize',14)
axis([0 152 0 0.1])
grid on
% title ('Step 0','fontsize',14 ) 
axh = gca;
set(axh,'XTick',[0:20:150]);
set(axh,'YTick',[0:0.01:0.1]);



avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);

fig81 = figure(81);
axes81 = axes('Parent',fig81,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam0(i,1);
    avsvn(i)=sum(strsvsdiam0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam0(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 500])
grid on
title ('Step 0','fontsize',14 )  


avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);

fig82 = figure(82);
axes82 = axes('Parent',fig82,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam0(i,1);
    avsvn(i)=sum(strsnmdiam0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam0(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 500])
grid on
title ('Step 0','fontsize',14 )  


fig83 = figure(83);
axes83 = axes('Parent',fig83,'FontSize',12);
bar(volg,volmgr/sum(volmgr))
xlabel('Volume of grain','fontsize',14)
ylabel('Frequency ','fontsize',14)
% axis([-10 320 0 0.25])
grid on
title ('Step 0','fontsize',14 ) 


avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);

fig84 = figure(84);
axes84 = axes('Parent',fig84,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg0(i,1);
    avsvn(i)=sum(strsvsvolg0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg0(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 350])
grid on
title ('Step 0','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);

fig85 = figure(85);
axes85 = axes('Parent',fig85,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg0(i,1);
    avsvn(i)=sum(strsnmvolg0(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg0(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg0(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 400])
grid on
title ('Step 0','fontsize',14 )  


%%%size effect second step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);

fig86 = figure(86);
axes86 = axes('Parent',fig86,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam1(i,1);
    avsvn(i)=sum(strsvsdiam1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam1(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 600])
grid on
title ('Step 1','fontsize',14 )  


avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);

fig87 = figure(87);
axes87 = axes('Parent',fig87,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam1(i,1);
    avsvn(i)=sum(strsnmdiam1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam1(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 600])
grid on
title ('Step 1','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);

fig88 = figure(88);
axes88 = axes('Parent',fig88,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg1(i,1);
    avsvn(i)=sum(strsvsvolg1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg1(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
% plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 400])
grid on
title ('Step 1','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig89 = figure(89);
axes89 = axes('Parent',fig89,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg1(i,1);
    avsvn(i)=sum(strsnmvolg1(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg1(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg1(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 500])
grid on
title ('Step 1','fontsize',14 )


%%%size effect third step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig90 = figure(90);
axes90 = axes('Parent',fig90,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam2(i,1);
    avsvn(i)=sum(strsvsdiam2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam2(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 2','fontsize',14 )  


avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig91 = figure(91);
axes91 = axes('Parent',fig91,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam2(i,1);
    avsvn(i)=sum(strsnmdiam2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam2(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 2','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig92 = figure(92);
axes92 = axes('Parent',fig92,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg2(i,1);
    avsvn(i)=sum(strsvsvolg2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg2(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 2','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig93 = figure(93);
axes93 = axes('Parent',fig93,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg2(i,1);
    avsvn(i)=sum(strsnmvolg2(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg2(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg2(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 2','fontsize',14 )


%%%size effect fourth step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig94 = figure(94);
axes94 = axes('Parent',fig94,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam3(i,1);
    avsvn(i)=sum(strsvsdiam3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam3(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(dia,maxvn,'g--','LineWidth',1.5)
% hold on
xlabel('Grain diameter (\mum)','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
axh = gca;
set(axh,'XTick',[0:25:150]);
set(axh,'YTick',[0:100:800]);
title ('Step-4','fontsize',14 )  
box on



avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig95 = figure(95);
axes95 = axes('Parent',fig95,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam3(i,1);
    avsvn(i)=sum(strsnmdiam3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam3(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 3','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig96 = figure(96);
axes96 = axes('Parent',fig96,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg3(i,1);
    avsvn(i)=sum(strsvsvolg3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg3(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 910])
grid on
title ('Step 3','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig97 = figure(97);
axes97 = axes('Parent',fig97,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg3(i,1);
    avsvn(i)=sum(strsnmvolg3(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg3(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg3(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 3','fontsize',14 )


%%%size effect 5th step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig594 = figure(594);
axes594 = axes('Parent',fig594,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam4(i,1);
    avsvn(i)=sum(strsvsdiam4(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam4(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam4(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
%plot(dia,maxvn,'g--','LineWidth',1.5)
%hold on
xlabel('Grain diameter (\mum)','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 800])
% legend ('variation','average value')
grid on
axh = gca;
set(axh,'XTick',[0:25:150]);
set(axh,'YTick',[0:100:800]);
title ('Step-5','fontsize',14 )  
box on

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig595 = figure(95);
axes595 = axes('Parent',fig595,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam4(i,1);
    avsvn(i)=sum(strsnmdiam4(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam4(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam4(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 3','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig596 = figure(596);
axes596 = axes('Parent',fig596,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg4(i,1);
    avsvn(i)=sum(strsvsvolg4(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg4(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg4(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 910])
grid on
title ('Step 4:315','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig597 = figure(597);
axes597 = axes('Parent',fig597,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg4(i,1);
    avsvn(i)=sum(strsnmvolg4(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg4(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg4(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 4:315','fontsize',14 )

%%%size effect 6th step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig694 = figure(594);
axes694 = axes('Parent',fig694,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam5(i,1);
    avsvn(i)=sum(strsvsdiam5(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam5(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam5(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 5: 316N','fontsize',14 )  


avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig695 = figure(695);
axes695 = axes('Parent',fig695,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam5(i,1);
    avsvn(i)=sum(strsnmdiam5(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam5(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam5(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 3','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig696 = figure(696);
axes696 = axes('Parent',fig696,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg5(i,1);
    avsvn(i)=sum(strsvsvolg5(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg5(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg5(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 910])
grid on
title ('Step 4:315','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig697 = figure(697);
axes697 = axes('Parent',fig697,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg5(i,1);
    avsvn(i)=sum(strsnmvolg5(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg5(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg5(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 5:316','fontsize',14 )



%%%size effect 7th step

avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig794 = figure(794);
axes794 = axes('Parent',fig794,'FontSize',12);
for i =1:szdia
    ncol=strsvsdiam6(i,1);
    avsvn(i)=sum(strsvsdiam6(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsdiam6(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsvsdiam6(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 6: 325N','fontsize',14 )  


avsvn=zeros(1,szdia);
maxvn=zeros(1,szdia);
fig795 = figure(795);
axes795 = axes('Parent',fig795,'FontSize',12);
for i =1:szdia
    ncol=strsnmdiam6(i,1);
    avsvn(i)=sum(strsnmdiam6(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmdiam6(i,2:ncol+1));
    end
    plot(repmat(dia(i),1,ncol), strsnmdiam6(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(dia,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(dia,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain diameter','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
axis([0 150 0 800])
grid on
title ('Step 6:325N','fontsize',14 )  



avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig796 = figure(796);
axes796 = axes('Parent',fig796,'FontSize',12);
for i =1:szvol
    ncol=strsvsvolg6(i,1);
    avsvn(i)=sum(strsvsvolg6(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsvsvolg6(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsvsvolg6(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('VonMises Stress (MPa)','fontsize',14)
% axis([0 320 0 910])
grid on
title ('Step 6:325','fontsize',14 )  
  

avsvn=zeros(1,szvol);
maxvn=zeros(1,szvol);
fig797 = figure(797);
axes797 = axes('Parent',fig797,'FontSize',12);
for i =1:szvol
    ncol=strsnmvolg6(i,1);
    avsvn(i)=sum(strsnmvolg6(i,2:ncol+1))/ncol;
    if (ncol >=1) 
        maxvn(i)=max(strsnmvolg6(i,2:ncol+1));
    end
    plot(repmat(volg(i),1,ncol), strsnmvolg6(i,2:ncol+1),'bo','LineWidth',1.5)
    hold on
 
end
plot(volg,avsvn,'r-o','LineWidth',1.5)
hold on
% plot(volg,maxvn,'g--','LineWidth',1.5)
hold on
xlabel('Grain Volume','fontsize',14)
ylabel('Principal Stress (MPa)','fontsize',14)
% axis([0 320 0 800])
grid on
title ('Step 6:325','fontsize',14 )


%% 


